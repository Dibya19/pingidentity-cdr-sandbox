{
	"info": {
		"_postman_id": "37e70964-93d4-47f4-bc75-195f70d33c70",
		"name": "DCR Flow 1.2 - CDR Register Test Harness v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "S001 Happy Scenario",
			"item": [
				{
					"name": "S001.T000 Create Brand/Software Copy",
					"item": [
						{
							"name": "S001.T001.001 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e7df2a5-69bd-4ce3-8f61-6fcf055089c0",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a05bffaf-3e4e-4ae1-8886-c333acde1ef6",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.002 - Get CDR Register Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec9c31e2-75bd-4389-b00d-181d58ef4d18",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate token_endpoint property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('token_endpoint');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerTokenEndpoint\", response.token_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/.well-known/openid-configuration",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.003 - Get CDR Register Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ababf9c-c6e8-40fe-a746-89d1b8b5310e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/as/token.oauth2",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.004 - Get SSA From Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e5c919f-533b-41ed-829f-8aec9e44573e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"software-ssa\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.005 - Get Private JWK (non-standard)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "031161f5-3618-4f9f-9493-7fb738d674b9",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.006 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0c5897a-0bad-4b97-a9e5-5a9cf4f1b872",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-dcr-requestjwt\", response[\"request-jwt\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{software-ssa}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"refresh_token\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\",\n  \"scope\": \"cdr:registration\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.007 - Call PingFederate DCR POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cf80153-f3b0-4eeb-949f-b8b41c75d698",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://myapp.com/cb'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://myapp.com/cb');",
											"    ",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{software-dcr-requestjwt}}"
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S001.T002 Read Client",
					"item": [
						{
							"name": "S001.T002.001 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1b5b982-ff4d-41a5-a8e6-239d5e0a698e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T002.002 - DR creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59ab3310-2ca1-40c8-a14b-9beca19a3c8e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcr-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T002.003 - DR requests Access Token from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f60e18bb-a8f6-4f1f-a749-ec2a6387e3e3",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"ccAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{dcr-client-assertion}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T002.004 - DR run DCR GET request to retrieve the client details from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "133d44ec-494e-483f-a20f-36387e987abd",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://myapp.com/cb'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://myapp.com/cb');",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S001.T003 Update Client",
					"item": [
						{
							"name": "S001.T003.001 - Update Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "39f842ac-27c6-406c-b2ad-881cf18132f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96fa25ac-abb0-4373-aa41-7ac0e4f4adf0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{legalEntityId}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"status\": \"ACTIVE\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Application abc 123\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://myapp.com/tos123.html\",\n                    \"redirectUri\": \"http://localhost:8088/*\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient/{{legalEntityId}}",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient",
										"{{legalEntityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.002 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8b51ad4-ff94-40c9-9520-9552e5ea3f1d",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.003 - Get CDR Register Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b341a8ac-ea87-463e-89f0-dfc84727a125",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/as/token.oauth2",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.004 - DH downloads updated Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0b369d1-74fc-4dd4-99cc-2dc5a1b202ad",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatementUpdate\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc 123",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://myapp.com/policy.html",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://myapp.com/tos123.html",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:8088/*",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "{{softwareId}}",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.005 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1998a688-d70b-4e1b-9dbf-42a7e8485f2e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-updateclient\", response[\"request-jwt\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatementUpdate}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"refresh_token\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"http://localhost:8088/*\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.006 - DR creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0535c9fc-e8d8-4bf9-952b-fa1bcd0f9330",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcr-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.007 - DR requests Access Token from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b001ce77-e089-4b73-8dcf-a813c0233bd0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"ccAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{dcr-client-assertion}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.008 - DR run DCR PUT request to update a client against the DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75eaa504-dc33-4b40-8841-7694bbd32f8f",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate tos_uri is 'https://myapp.com/tos123.html'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.tos_uri).to.equal('https://myapp.com/tos123.html');",
											"});",
											"pm.test(\"Validate client_name is 'Application abc 123'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.client_name).to.equal('Application abc 123');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'http://myapp.com/cb'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('http://localhost:8088/*');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-updateclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T003.009 - DR run DCR GET request to retrieve the updated client details from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "015463fd-1e92-4f37-9cec-1a841d105f9a",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate tos_uri is 'https://myapp.com/tos123.html'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.tos_uri).to.equal('https://myapp.com/tos123.html');",
											"});",
											"pm.test(\"Validate client_name is 'Application abc 123'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.client_name).to.equal('Application abc 123');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://localhost:8088/*'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('http://localhost:8088/*');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d27bdea-62b3-4777-ad60-3b751adc73c9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b49ad07-14e4-4b76-b32d-b3a80924a78a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S001.T004 Delete Client",
					"item": [
						{
							"name": "S001.T004.001 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc6bbe39-3858-43d7-93e8-77cc2e50b59e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T004.002 - DR creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a97d9c1-2c5f-4a60-ae59-3604736d95cc",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcr-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T004.003 - DR requests Access Token from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1afc404b-29e2-4b0c-aff2-7ceec8029241",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"ccAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{dcr-client-assertion}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T004.004 - DR run DCR DELETE request to retrieve the client details from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8633ea8b-d8da-4b02-ae44-3ac9ec6ef716",
										"exec": [
											"pm.test(\"Validate response status=204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T004.005 - DR creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe997cb5-45c0-4115-ad3e-c9ae1153434f",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcr-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T004.006 - DR requests Access Token from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d941ea2-5c9f-49e5-94d9-1edea12fb7ed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{dcr-client-assertion}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T004.007 - DR run DCR GET request to retrieve the client details from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e66d0b64-1f55-4d44-8f13-ba2e0b45ccdd",
										"exec": [
											"pm.test(\"Validate response status=401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "02c9c55c-8984-4bab-a358-06a0cee088ec",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e1751f2-0f91-4e1e-aed4-cdb773357b77",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "56c9418d-086f-4a61-b539-0f1d40822f7f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "edfe4b2f-158c-403e-b373-e94923cc6a2f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S002 Duplicate Create Validation",
			"item": [
				{
					"name": "S002.T001 Create Client",
					"item": [
						{
							"name": "S002.T001.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "79ab9621-6972-42c3-85e3-a6d186eddbec",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "91fb0790-5d3b-449d-b543-f20dfd96e9a1",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.001 - Get CDR Register Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fc4b9f9-2cda-47c3-9021-f968971417db",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/as/token.oauth2",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.002 - DH downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1899c80e-d65b-4cad-b6fa-355478ab2919",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc 123",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://myapp.com/policy.html",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://myapp.com/tos123.html",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:8088/*",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "{{softwareId}}",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.002 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f38bcc0c-26b4-42ca-92db-08b2362af7fb",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f208f47-9049-4bff-afc0-f0c8086bec22",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae577fe4-93ba-4f96-9404-0502b7dc6972",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3cffe645-2eb3-41e3-8120-dcda3017a399",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0121e96f-4652-4cd1-89a4-d24372112a57",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T002 Create Client Again - Should fail",
					"item": [
						{
							"name": "S002.T002.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69c18c47-e487-4fa0-94d4-6c46197628bb",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T002.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09e31049-1cb5-43b2-a900-564d320c4a8f",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Validate error=invalid_client_metadata\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error).to.equal('invalid_client_metadata');",
											"});",
											"pm.test(\"Validate error_description is correct\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error_description).to.equal('Duplicate registrations for a given software_id are not valid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff830329-20a5-42ac-aeae-76a9dbceed40",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "addc8d8d-e0d0-4010-854d-4c6d628eb362",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S003 Request Invalid Response Types",
			"item": [
				{
					"name": "S003.T001 Create Client with bad Response Type",
					"item": [
						{
							"name": "S003.T001.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f1513f36-fa93-4cb7-82e3-d1fc49680a39",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e1fe969-20a0-4030-a4ce-0a0b08788350",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T001.001 - DH downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "114b0fdc-b5e5-497b-9a1d-827f8cd679b8",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc 123",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://myapp.com/policy.html",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://myapp.com/tos123.html",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:8088/*",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "{{softwareId}}",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T001.002 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85c89a94-268a-4ccb-9f0b-cebb8736e2d1",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5e689fe-1d28-45f7-9057-12b9012bb7bc",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b99e932d-7653-4e38-90f3-466213493b25",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error=invalid_client_metadata\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error).to.equal('invalid_client_metadata');",
											"});",
											"pm.test(\"Validate error_description value\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error_description).to.equal('Bad value \\'code token\\' for response_types');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95e0c6dc-b0e0-43f0-ae6f-df27ac0fed5d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f9ad8f5b-90e7-4198-82b7-73d46e766356",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S003.T002 Create Client then Update with bad Response Type",
					"item": [
						{
							"name": "S003.T002.002 - DH downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ba210f5-4a6e-447b-b5f8-021079977e97",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc 123",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://myapp.com/policy.html",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://myapp.com/tos123.html",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:8088/*",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "{{softwareId}}",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T002.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cf9adac-d86e-400e-9f9c-bb20893eece4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T002.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8459a514-d52a-475e-8888-c7e0d60265d8",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T002.005 - DR creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c9553b7-e553-4389-b091-badf7e2d3e56",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcr-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T002.006 - DR requests Access Token from DH Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08205b8a-8da0-42d9-a3ec-18eec790770e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"ccAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{dcr-client-assertion}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T002.007 - DR creates Request JWT to update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d657262-d67e-4c50-9031-a4c232b3acc6",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-updateclient\", response[\"request-jwt\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S003.T002.008 - DR run DCR PUT request to update a client against the DH Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5e2a144-7f45-4042-bbab-5e50da6dab26",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error=invalid_client_metadata\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error).to.equal('invalid_client_metadata');",
											"});",
											"pm.test(\"Validate error_description value\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error_description).to.equal('Bad value \\'code token\\' for response_types');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-updateclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a38f146f-6760-45c9-a728-ec5d7b4f0299",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a968483f-6694-463e-9998-ddfe7afa3fa5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "997dc208-e168-456d-9c5f-285ed6e1d779",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "afd075b6-5bd9-4f4a-b5f2-53e5a3c45240",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S004 Request Invalid Token Auth Algorithm",
			"item": [
				{
					"name": "S004.T001 Create Client with bad Token Algorithm",
					"item": [
						{
							"name": "S004.T001.001 - DH downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "684577fc-931f-4ccc-8a4e-9440e9b0030c",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc 123",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://myapp.com/policy.html",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://myapp.com/tos123.html",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:8088/*",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "{{softwareId}}",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3d28458-6ef7-438c-9b27-459edb2595d4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"RS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}\n",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07c9f4a0-c187-4a37-a079-f6964558f354",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error=invalid_client_metadata\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error).to.equal('invalid_client_metadata');",
											"});",
											"pm.test(\"Validate error_description value\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error_description).to.equal('Bad value \\'RS256\\' for token_endpoint_auth_signing_alg');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15ce481d-2ac4-49bd-b7e5-67ad4d751953",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edad18b8-23e1-4ad1-a5f0-34a86f976b75",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S003.T002 Create Client then Update with bad Token Algorithm",
					"item": [
						{
							"name": "S004.T002.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4f40c982-532f-4f0a-bfaa-82732e8a88be",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7c84380-67fd-4614-a442-245de3b738e3",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.002 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f91402a-cf33-453f-8f0a-b63c1e49d841",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.001 - DR downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d464cbfd-ee7b-4fe5-8fa9-e372d9dc8599",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc 123",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://myapp.com/policy.html",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://myapp.com/tos123.html",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:8088/*",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "{{softwareId}}",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44ca7671-9795-45e6-ac12-0bf18d03348a",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9e23f8b-7191-45ff-978f-bce180839601",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.005 - DR creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c60ac239-4568-4407-8c1f-6f6918ab5e42",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcr-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.006 - DR requests Access Token from DH Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "154f24ba-f0da-4afb-a111-62ddefe69365",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"ccAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{dcr-client-assertion}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.007 - DR creates Request JWT to update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f342db8-32ef-4564-b188-e45b9dfbcfc5",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-updateclient\", response[\"request-jwt\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"RS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.008 - DR run DCR PUT request to update a client against the DH Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec3101a9-8361-4e57-8f1a-be8a14a2a82a",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error and error_description exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"    pm.expect(response).to.have.property('error_description');",
											"});",
											"pm.test(\"Validate error=invalid_client_metadata\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error).to.equal('invalid_client_metadata');",
											"});",
											"pm.test(\"Validate error_description value\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error_description).to.equal('Bad value \\'RS256\\' for token_endpoint_auth_signing_alg');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-updateclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "001cfe1e-2b33-4a09-8419-11948259c8d3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a259ce8a-edb0-44f5-a0c7-61da7d061680",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0bd45d2b-a789-49f0-902c-65a997c5d278",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1d78c225-85b8-4b78-8d09-fa311fc51d61",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S005 Redirect URI validation",
			"item": [
				{
					"name": "S005.T001 Request JWT does not contain Redirect URIs",
					"item": [
						{
							"name": "S005.T001.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dca37f88-2fef-49aa-ad95-cd2352b1776f",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "78d0199c-fe99-4f93-85f4-5d7597d9e5f6",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb,https://myapp.com/cbabc\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T001.001 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "509891fe-f047-40c0-b0cd-16af1eb207f0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T001.002 - DR downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "843b5219-8115-4bef-9c85-14af683bd457",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86a5afb4-3622-488c-8e60-b191180497a9",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d3d5a2d-e71c-47ef-89c7-3384806c1657",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://myapp.com/cb' and 'https://myapp1.com/cb'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://myapp.com/cb');",
											"    pm.expect(response.redirect_uris).to.include('https://myapp.com/cbabc');",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dbef063b-a8d4-4846-9958-653cfd51e4a7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08a582cc-b5e8-46ed-89fc-dae5cd0002d4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S005.T002 Request JWT contains 1 valid Redirect URI",
					"item": [
						{
							"name": "S005.T002.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10a0156f-01cb-42ad-abc6-396cfa7164da",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cb01419a-c47e-438a-a8af-9411eb62a51f",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb,https://myapp.com/cbabc\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.001 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41fd35a6-7f2e-49d9-9b11-51e12da67c02",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.001 - DR downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42b58442-1fd5-414e-aa4f-1eb91cd7287d",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8f1e794-ce12-4050-9032-3b3b2f2f75f9",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cbabc\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597be9c6-d4fe-4d16-9f92-8947af39eba6",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://myapp1.com/cb' and not 'https://myapp1.com/cb'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.not.include('https://myapp.com/cb');",
											"    pm.expect(response.redirect_uris).to.include('https://myapp.com/cbabc');",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "990c5bdd-7009-4667-abc8-85fb4ef322ad",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12a31873-5787-4a27-91b1-744db0d0edda",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S005.T003 Request JWT contains bad Redirect URI",
					"item": [
						{
							"name": "S005.T003.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ff7db82-b71e-4467-b8b9-cc2ba04b13f2",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e05c0622-d173-402d-a3b5-e5a7869f331a",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb,https://myapp.com/cbabc\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T003.001 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b0b78fd-1146-4db3-b856-e18517c87238",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T003.001 - DR downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3af9d04f-ffe8-462a-9e69-1a668f0bf2f8",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T003.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e577cca7-8720-4cad-896f-86b21b4532fe",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://baduri.com\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T003.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "560536b9-398a-45f3-b0e8-d6454e675b4f",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Validate error=invalid_redirect_uri\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error).to.equal('invalid_redirect_uri');",
											"});",
											"pm.test(\"Validate error_description is correct\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error_description).to.equal('Provided value(s) for redirect_uris was incorrect');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2bfb9ffd-4608-4a8d-9ef6-a70e58c2964c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d941258-8ba5-474c-8c6f-94d9eb75ba81",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "39da2c2a-6ed7-4c2c-b592-7518694c9371",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e475eacf-9c58-469c-9f87-e3583eaddad1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S007 Test missing cdr:registration scope",
			"item": [
				{
					"name": "S007.T001 Create Client",
					"item": [
						{
							"name": "S007.T001.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee07e3b4-2480-44f7-9d5c-41f9ce99dfa4",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "145cd461-b20e-4a71-b429-8a6bd4abe8c0",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb,https://myapp.com/cbabc\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.001 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "428dbb96-84c4-4b2e-97ca-5721f70f7042",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.001 - DR downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "049a1e88-5c6f-4653-952d-67ed82a64c89",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7f09416-6db4-4f15-ac2b-a82f4da56c06",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cb\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da51da8f-5a4c-4e01-953d-8da2c9ff1efa",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://myapp.com/cb'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://myapp.com/cb');",
											"    ",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dce1efb7-9a95-49ca-9df0-14c041873b8e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "48b22495-055a-4a06-80d6-216b1d5aa2be",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S007.T002 Read Client with invalid AT",
					"item": [
						{
							"name": "S007.T002.002 - DR creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bacf3111-301d-432d-8841-d8e8a23223ef",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcr-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.003 - DR requests Access Token from DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e9ffa79-1569-4dad-b7fa-a62fb9e4b698",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"ccAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{dcr-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.004 - DR run DCR GET with invalid AT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2705aef8-f84d-4f27-910f-55502b7aed49",
										"exec": [
											"pm.test(\"Validate response status=401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Validate error property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('error');",
											"});",
											"pm.test(\"Validate error=invalid_missing_scope\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.error).to.equal('invalid_access_token');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ccAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "X-CorrelationId",
										"value": "asdgds",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}/{{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									],
									"path": [
										"{{dcrClientId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e229998a-5667-4ad9-b4a8-4b0e0fbb340f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5cb29c4-2b90-4e22-826e-50b14febcd19",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "866cec2b-3802-480c-8bda-2d19290fcbd1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3eaebcac-4406-4d3e-a4e2-108566c71f90",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S008 DCR claims tests",
			"item": [
				{
					"name": "S008.T001 test iss equal to software_id",
					"item": [
						{
							"name": "S008.T001.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "743b652b-19ef-45ed-9ce5-9f4ffbf0c590",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15cbc186-f6c2-4ce8-9472-159f529583e0",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb,https://myapp.com/cbabc\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.001 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e9e9d8e-ccdc-47e4-8828-a3ea98edd581",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.001 - DR downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63545097-81ca-425c-8827-6842734843a2",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b66c984-1cf9-44a5-a1bf-14b1b8aeb4ea",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"refresh_token\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cbabc\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0884d87e-ce56-4811-a122-88ef2dc68188",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://myapp.com/cbabc'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://myapp.com/cbabc');",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9029b4b1-9239-48ed-9b86-564ae4adde3d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a7e5963d-9967-49c4-9541-0614d7f0f221",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S008.T001 fail when test iss not equal to software_id",
					"item": [
						{
							"name": "S008.T001.000 - Create Brand/Software Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09341155-6c9d-49f6-bb8a-32dfa8403d07",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f037da1d-26fb-4617-932b-68ae6e08fcc5",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://myapp.com/cb,https://myapp.com/cbabc\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.001 - DR downloads Private Key from CDR Register Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66f9557c-0a6d-4d0d-96c8-9090949e1ab8",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.001 - DR downloads Software Statement from CDR Register Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7e8b8a5-5d77-4ce5-b5f4-cc6162420ed1",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"softwareStatement\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "{{pki-basicheader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "832cd7a9-b3c3-4f14-bbd5-5ca178a2e70f",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}-bad\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"refresh_token\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://myapp.com/cbabc\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35c2cb00-44e2-4a24-ab2d-fbffcdf69c98",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e273502-9609-4343-a44a-ee6cbb8b1ae2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74332df1-9fa9-4207-aaaa-eef91084d3b7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f5ba78a2-5f24-4b1f-afd1-0e9482ead960",
				"type": "text/javascript",
				"exec": [
					"Object.prototype.jwt_decode_payload = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return JSON.parse(atob(parts[1]));",
					"}",
					"",
					"Object.prototype.jwt_decode_header = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return JSON.parse(atob(parts[0]));",
					"}",
					"Object.prototype.jwt_parts = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return parts.length;",
					"}",
					"Object.prototype.test_http_status = function(http_status,response) {",
					"    pm.test(\"Validate response status=\"+http_status, function () {",
					"        response.to.have.status(http_status);",
					"    });",
					"}",
					"",
					"Object.prototype.test_jwt_alg = function(alg,jwt_header) {",
					"    pm.test(\"Validate JWT ALG =\"+alg, function () {",
					"        pm.expect(jwt_header.alg).to.eql(alg);",
					"    });",
					"}",
					"",
					"Object.prototype.test_params_object = function(params,object,suffix){",
					"    for (i=0; i<params.length; i++) {",
					"        pm.test(\"Validate \"+ params[i] + \" \" + suffix, function () {",
					"            pm.expect(object).to.have.property(params[i]);",
					"        });",
					"    }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4f0d708f-08ef-4cd4-8b57-d78565f9fbfe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fff22714-2452-4516-bc7d-951f2c47e5ca",
			"key": "cdr-register-testharness-host",
			"value": "https://mockregister.data-holder.local"
		},
		{
			"id": "cfe7012a-ee57-434b-9b19-d453b4c6303d",
			"key": "dh-idp-host",
			"value": "https://sso.data-holder.local"
		},
		{
			"id": "cf6d7f43-2b88-431f-830c-a3d7563cb915",
			"key": "dh-idp-register-endpoint",
			"value": "/as/clients.oauth2"
		},
		{
			"id": "3752aa71-4dd1-4ac7-b311-5efa117425da",
			"key": "dh-idp-token-endpoint",
			"value": "/as/token.oauth2"
		},
		{
			"id": "1c1f9fbc-050f-4ab2-8268-fa34b2096600",
			"key": "pki-basicheader",
			"value": "Basic cGtpdXNlcjphYmNEMzBmZw=="
		},
		{
			"id": "e0fb8cd8-bf7a-47c8-95a9-963f5280993e",
			"key": "default-redirecturi",
			"value": "https://httpbin.org/get"
		},
		{
			"id": "7eecedff-60b2-458a-99d1-5264eb07e0cc",
			"key": "data-recipient-id",
			"value": "mycompanya"
		}
	],
	"protocolProfileBehavior": {}
}