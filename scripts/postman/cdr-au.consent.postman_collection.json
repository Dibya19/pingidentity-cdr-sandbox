{
	"info": {
		"_postman_id": "50ea4cd2-4f6c-456e-8b85-49c4ee5fdddc",
		"name": "Consent Flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "S001 Create Client",
			"item": [
				{
					"name": "S001.T001 Create Client",
					"item": [
						{
							"name": "S001.T001.001 - DH downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6a3fbf3-1297-4350-808e-d4efd3bca51a",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate software_statement property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('software_statement');",
											"});",
											"pm.test(\"Validate software_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('software_id');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"softwareStatement\", response.software_statement);",
											"    pm.environment.set(\"softwareId\", response.software_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{pki-basicheader}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://idpv2.pingapac.com/pf/heartbeat.ping",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://idpv2.pingapac.com/pf/heartbeat.ping",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://www.google.com.au,{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.002 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"id": "75735b1c-fa03-456b-8e1a-b70f246c05fb"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b073ff8-09d3-4c61-be98-970e0a07a4e8",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "softwareStatement",
											"value": "{{softwareStatement}}",
											"type": "text"
										},
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "audience",
											"value": "{{dh-audience}}",
											"type": "text"
										},
										{
											"key": "token-endpoint-auth-method",
											"value": "private_key_jwt",
											"type": "text"
										},
										{
											"key": "grant-types",
											"value": "authorization_code,client_credentials,refresh_token",
											"type": "text"
										},
										{
											"key": "response-types",
											"value": "code id_token",
											"type": "text"
										},
										{
											"key": "application-type",
											"value": "web",
											"type": "text",
											"disabled": true
										},
										{
											"key": "id-token-signed-response-alg",
											"value": "PS256",
											"type": "text"
										},
										{
											"key": "request_object_signing_alg",
											"value": "PS256",
											"type": "text"
										},
										{
											"key": "token-endpoint-auth-signing-alg",
											"value": "PS256",
											"type": "text"
										},
										{
											"key": "redirect-uris",
											"value": "{{default-redirecturi}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestCreate",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestCreate"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4880fa53-2698-4f59-b067-9ca9889c27a2",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://httpbin.org/get'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://httpbin.org/get');",
											"    ",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1fcfc67-6f01-4a8d-a753-6b480a2da37b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "853c101f-a462-49ab-89e5-a1e32449a0c5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "88c7eedc-7372-4135-8527-1f6e6bb57a91",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3fd669a9-fb2c-46ae-aacb-963a2bb88dae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S002 Consent Flow - Happy Scenario",
			"item": [
				{
					"name": "S002.T001 Obtain Access Token",
					"item": [
						{
							"name": "S002.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a3c50c1-a3f9-489e-b29f-7ce5f9baa45e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.002 - Creates Request Object JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "181d52d7-1604-4d5c-9877-0f2a7b858453",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestGenericJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d745f85-1701-45df-b7e1-6c621853bc34",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.004 - Provider username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe9fd90c-2aec-48f2-a609-dd2b3e7a7704",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac065b2a-6e75-4126-820b-ef3a825fd901",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.005 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49e85b61-d7d6-4926-a7b4-215760298107",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6f3881a-9531-424f-a5ba-361ba32ea107",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.007 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "853fdea9-fc1c-4550-9736-14fa49ff24d1",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f2119f60-9b28-4e67-b2af-e167cca80721",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53da8368-5565-47af-ab57-9c838b2e39de",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T002 Introspect Tokens",
					"item": [
						{
							"name": "S002.T002.001 Introspect Refresh Token",
							"item": [
								{
									"name": "S002.T002.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "366981bf-fdb0-4b8d-a566-694797562f1e",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/introspect.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T002.001.002 - Introspect Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3872e3fc-0cad-4844-a0af-146901243754",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate exp is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"});",
													"pm.test(\"Validate active=true\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S003.T002.001 Introspect Access Token - Should fail",
							"item": [
								{
									"name": "S003.T002.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e6c8a19-4a2c-4a94-a5f9-83b8577dfc8c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/introspect.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S003.T002.002.002 - Introspect Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "084329fe-af8e-4054-bd31-b9b889ae5ff7",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response active=false\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-access-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T003 Refresh Tokens",
					"item": [
						{
							"name": "S002.T003.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e9dd4a4-4e3d-4c55-8436-f10125e700df",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T003.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "893227dc-671b-4bae-8281-fde19ca7a283",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65472050-7c72-4a2c-9f10-cde92f575559",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9248612a-3184-4132-bfd0-79f2aee6cd66",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T004 Call Bank API's",
					"item": [
						{
							"name": "S002.T004.001 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9470363-c578-41ea-8978-72ae0f7e075c",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6abcce7-00d8-4426-a307-59f3e8733a58",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.002 - Get account balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1e5de5c-bce2-416b-9627-6a7944631d6b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/balance",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"balance"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0be902fc-ed8f-47bd-8feb-92ede82cda47",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a99288e2-722e-4cab-b1e8-cffb24dcfa7b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T005 Userinfo",
					"item": [
						{
							"name": "S002.T005.001.002 - Call userinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dae2631-7fcf-4299-936e-500af573ecbd",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b090c2e0-a26d-4edc-87da-7c004f66eefa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "289f03e2-4722-48f7-b560-121089cad085",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T006 Revoke Tokens",
					"item": [
						{
							"name": "S002.T006.001 Revocation",
							"item": [
								{
									"name": "S002.T006.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9f8da56-2f2f-4bd5-82de-9a24dacb5e5d",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T006.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1542221c-cc1b-4e0e-b4e4-146143153a2a",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-revocation-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-revocation-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S002.T006.002 Refresh Tokens - should fail",
							"item": [
								{
									"name": "S002.T006.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fc94f4b-48f5-4129-a8d9-c2ced2d4c21f",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T006.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ba07f6d-5038-4904-a470-5abdbef59c1c",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90af4359-efc7-489a-87f4-42753d15c2ea",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "870ebca9-060a-4944-9685-4b2df0cba68a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "32b29580-ec98-41a8-8292-7cfee939a356",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d9662dd-7f48-440c-b623-4d9fb39369bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "81e3088a-2f69-437c-90b3-ad3a02ed176b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "765dd593-ff80-4759-9411-86f8604ac6da",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "356bb335-c912-4d42-a9c0-ee1cd15731d9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5d0af513-6721-483a-b274-c0fbd5c6da3a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "60f22961-11a7-48cd-9d18-f3723c212890",
			"key": "cdr-register-testharness-host",
			"value": "http://sso.data-holder.local:8084",
			"type": "string"
		},
		{
			"id": "8ab60703-5b88-4c97-844a-0d6282cda71a",
			"key": "dh-idp-host",
			"value": "https://sso.data-holder.local",
			"type": "string"
		},
		{
			"id": "07b0b5de-2e0c-48e5-90e7-15c5d350197c",
			"key": "dh-idp-register-endpoint",
			"value": "/as/clients.oauth2",
			"type": "string"
		},
		{
			"id": "96552547-ed58-4138-a4d3-fdac02007bfa",
			"key": "dh-idp-token-endpoint",
			"value": "/as/token.oauth2",
			"type": "string"
		},
		{
			"id": "3fbf83d2-d2e6-4ccd-9c99-b15afc18fd81",
			"key": "dh-audience",
			"value": "https://data-holder",
			"type": "string"
		},
		{
			"id": "fa99bd17-58db-4f8a-a973-464d144d3c33",
			"key": "pki-basicheader",
			"value": "Basic cGtpdXNlcjphYmNEMzBmZw==",
			"type": "string"
		},
		{
			"id": "af8e20cc-6f9b-49bf-b82b-36303a587246",
			"key": "default-nonce",
			"value": "ea18887b-8629-43f2-93e1-4346959fb2ec",
			"type": "string"
		},
		{
			"id": "51d2aa4c-e760-4d5b-99c2-c47b5f8d49f6",
			"key": "default-state",
			"value": "887bea18-93e1-8629-43f2-59fb2ec43469",
			"type": "string"
		},
		{
			"id": "9f2e7a31-757a-4d5d-8ac1-5255da4d40f4",
			"key": "dh-idp-authorization-endpoint",
			"value": "/as/authorization.oauth2",
			"type": "string"
		},
		{
			"id": "17c24960-07b0-48a4-b39e-5454032ecca5",
			"key": "default-redirecturi",
			"value": "https://httpbin.org/get",
			"type": "string"
		},
		{
			"id": "c2d763b2-a69b-4980-984f-dd55d1b0c3a5",
			"key": "dh-idp-introspect-endpoint",
			"value": "/as/introspect.oauth2",
			"type": "string"
		},
		{
			"id": "8fc4b8ea-6707-4a73-b4a1-d1bdd77b4c23",
			"key": "dh-api-host",
			"value": "https://api.data-holder.local/cds-au",
			"type": "string"
		},
		{
			"id": "9eac8793-5c2c-4758-9c1a-5175e20e0d0a",
			"key": "dh-idp-revocation-endpoint",
			"value": "/as/revoke_token.oauth2",
			"type": "string"
		},
		{
			"id": "1a1742b3-c21c-4965-9806-4792ac71b12f",
			"key": "dh-idp-userinfo-endpoint",
			"value": "/idp/userinfo.openid",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}