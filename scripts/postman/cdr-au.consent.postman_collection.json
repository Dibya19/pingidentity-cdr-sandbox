{
	"info": {
		"_postman_id": "37ffb212-b3cd-4d48-8ea2-49efa6b2e708",
		"name": "Consent Flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "S001 Create Client",
			"item": [
				{
					"name": "S001.T001 Create Client",
					"item": [
						{
							"name": "S001.T001.001 - DH downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07ab5223-df7c-4e1a-aa50-0256476868ae",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate software_statement property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('software_statement');",
											"});",
											"pm.test(\"Validate software_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('software_id');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"softwareStatement\", response.software_statement);",
											"    pm.environment.set(\"softwareId\", response.software_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{pki-basicheader}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://idpv2.pingapac.com/pf/heartbeat.ping",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://idpv2.pingapac.com/pf/heartbeat.ping",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://www.google.com.au,{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.002 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"id": "33a62e69-e989-41cd-8bcf-4895d6ba7ddf"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "142a938d-91df-414d-93eb-5d2afcf1ba4b",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aud\": \"{{dh-audience}}\",\n  \"software_statement\": \"{{softwareStatement}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"refresh_token\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"{{default-redirecturi}}\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/dcr/requestCreateJwt",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"dcr",
										"requestCreateJwt"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f48d46b-f490-4c48-82e1-4d19fa0c1c74",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://httpbin.org/get'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://httpbin.org/get');",
											"    ",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "affde61e-0823-4103-9949-f90828e81af1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c27f407b-d1a7-4650-8224-f0abac849403",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e9c4625b-828b-4e00-9b51-f9e46e8166ad",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "404b0772-3d27-42bb-a393-febe3add2714",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S002 Consent Flow - Happy Scenario",
			"item": [
				{
					"name": "S002.T001 Obtain Access Token",
					"item": [
						{
							"name": "S002.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f8f04a3-1b8e-4397-afa8-add46c756629",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ddafcaf-5618-4ca4-9966-605ad90f7281",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestGenericJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa89a52-918e-49e9-bb23-fa90bcb863e8",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.004 - Provider username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86a4252e-7e46-4546-a292-a4399404e30b",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6580544c-9517-4b08-ac33-cc1917039272",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd2edd10-df0f-4ed2-a37d-749c24f40048",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e9fc23e-9cb6-4370-be84-f18d2eb79d51",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a8ab6c9-f8d6-494b-80a6-08bf68e36fdf",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea8ac171-c246-4199-a426-f9c4b796a22b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "078d6e0c-571e-4f7c-9b8d-4cc027860f8e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T002 Introspect Tokens",
					"item": [
						{
							"name": "S002.T002.001 Introspect Refresh Token",
							"item": [
								{
									"name": "S002.T002.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2362d137-945c-4922-ab2f-e2603e7ec2d0",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/introspect.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T002.001.002 - Introspect Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "134d41d3-13e4-4dce-b8bd-f35d3e28ba36",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate exp is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"});",
													"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('cdr_arrangement_id');",
													"});",
													"pm.test(\"Validate active=true\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(true);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S003.T002.001 Introspect Access Token - Should fail",
							"item": [
								{
									"name": "S003.T002.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10c2e897-2a92-47dc-8d14-76282d2b9d83",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/introspect.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S003.T002.002.002 - Introspect Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c786544f-76f8-47d3-9e66-c08426d1e9a8",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response active=false\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-access-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T003 Refresh Tokens",
					"item": [
						{
							"name": "S002.T003.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24cd3e25-9b9d-49cc-9da9-ea3acf09ae2a",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T003.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a343b47-4f3c-44fb-802f-0bac718a2d59",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "540b9769-a356-451f-a3e7-4ea8337cd170",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e94d021-399a-4651-943b-01e0956213ab",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T004 Call Bank API's",
					"item": [
						{
							"name": "S002.T004.001 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62b7e3e0-7366-4949-9f02-f8852788c070",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0220dac-3e1b-4cc9-aba9-8c92ebbf1d5a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.002 - Get account balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73c1d52f-4b8d-4049-ab63-cae7bcb2b0fd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/balance",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"balance"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ffcd243-9eab-48d9-bf1e-bc114adf490d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "019c5517-8f3f-448a-ac38-ea4a7fba2ad1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T005 Userinfo",
					"item": [
						{
							"name": "S002.T005.001.002 - Call userinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02c00024-f41b-4f20-bada-afe67faa963e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f70d39a-44e8-45fd-8a74-61d0d1bf5e49",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4c3f402-03b0-4aa3-8fcf-5818b540cdff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T006 Revoke Tokens",
					"item": [
						{
							"name": "S002.T006.001 Revocation",
							"item": [
								{
									"name": "S002.T006.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ce7fe51-09f9-4e07-a6dd-4e9d2d547d9b",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T006.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76af8578-5b36-40bf-bf2e-3933aa52b8c4",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-revocation-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-revocation-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S002.T006.002 Refresh Tokens - should fail",
							"item": [
								{
									"name": "S002.T006.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bff90585-aa1a-40f2-9f0a-48ddf54029a0",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T006.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd522eb7-8609-467c-a3e2-bcc8968db736",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0125bf78-0d60-4dad-a51c-e85040c2ea19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6fb498e7-091f-46eb-895c-8787f3db95f5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "13acc2e4-6d2f-43a3-899a-d0fe19ffc394",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "030875bf-5b94-495d-8068-333d632e3e6f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9f85440-5f7f-43c3-ab25-70330e97ce46",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6d1a13a7-bc4f-434b-9b6f-6a07438579bd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S003 - Push Authorization Request",
			"item": [
				{
					"name": "S003.T001.001 - Download Private Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9ab556e-cf5f-46d2-a6c4-f12076723d9f",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate kty is RSA\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.kty).to.equal('RSA');",
									"});",
									"pm.test(\"Validate algorithm is PS256\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.alg).to.equal('PS256');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var responseBlob = btoa(pm.response.text());",
									"    pm.environment.set(\"software-jwks-private\", responseBlob);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"softwarestatement",
								"JWKS",
								"{{softwareId}}",
								"private"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.002 - Create Request JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28670e40-a25e-488a-9919-afd82004e099",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request-jwt');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-private-jwk",
								"type": "text",
								"value": "{{software-jwks-private}}"
							},
							{
								"key": "x-nonce",
								"type": "text",
								"value": "{{default-nonce}}"
							},
							{
								"key": "x-state",
								"type": "text",
								"value": "{{default-state}}"
							},
							{
								"key": "x-issuer",
								"type": "text",
								"value": "{{dcrClientId}}"
							},
							{
								"key": "x-duration-seconds",
								"type": "text",
								"value": "60"
							},
							{
								"key": "x-dataholder-authorization-endpoint",
								"type": "text",
								"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							},
							{
								"key": "x-response-type",
								"type": "text",
								"value": "code id_token"
							},
							{
								"key": "x-scope",
								"type": "text",
								"value": "openid profile bank:accounts.basic:read bank:transactions:read"
							},
							{
								"key": "x-redirecturi",
								"type": "text",
								"value": "{{default-redirecturi}}"
							},
							{
								"key": "x-maxage",
								"type": "text",
								"value": "-1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"tpp",
								"requestGenericJWT"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.003 - Creates JWT-Bearer Client Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "236dd1fe-d122-4c87-a856-4ade431666b5",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate client assertion is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('client-assertion');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "private-jwk",
									"value": "{{software-jwks-private}}",
									"type": "text"
								},
								{
									"key": "client-id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "token-endpoint",
									"value": "{{dh-idp-host}}",
									"type": "text"
								},
								{
									"key": "kid",
									"value": "{{softwareId}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"tpp",
								"createClientAssertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.004 - Initiate PAR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb4bae60-9282-430f-b8ce-8d323c6ed66e",
								"exec": [
									"pm.test(\"Validate response status=201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request_uri');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-uri\", response[\"request_uri\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "request",
									"value": "{{consent-request-jwt}}",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{consent-client-assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://sso.data-holder.local/as/par.oauth2",
							"protocol": "https",
							"host": [
								"sso",
								"data-holder",
								"local"
							],
							"path": [
								"as",
								"par.oauth2"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.005 - Initiate Consent Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ac5473f-bef6-4116-9bc5-4284e5db8fd5",
								"exec": [
									"",
									"",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}?request_uri={{consent-request-uri}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							],
							"query": [
								{
									"key": "request_uri",
									"value": "{{consent-request-uri}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.006 - Provider username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37afe669-7a5e-498c-ac15-151eea2ed0e3",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "crn0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.007 - Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2295c89-54a4-4a3d-8c42-51085a1b5f8b",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
									"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_VALUE",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_STATE",
									"value": "true",
									"type": "text"
								},
								{
									"key": "CSRF_TOKEN",
									"value": "{{consent-request-otp-csrf}}",
									"type": "text"
								},
								{
									"key": "submitform",
									"value": "true",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.008 - Perform consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70ac810d-d050-4dc0-b56d-716c0f0e99a1",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var locationHeader = pm.response.headers.get(\"Location\");",
									"    if(!locationHeader)",
									"        locationHeader = pm.response.headers.get(\"Referer\");",
									"",
									"    var locationParams = locationHeader.split(\"#\")[1];",
									"    const eachParamArray = locationParams.split('&');",
									"    let params = {};",
									"    eachParamArray.forEach((param) => {",
									"        const key = param.split('=')[0];",
									"        const value = param.split('=')[1];",
									"        Object.assign(params, {[key]: value});",
									"    });",
									"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
									"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
									"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accounts",
									"value": "{{consent-request-consent-account}}",
									"type": "text"
								},
								{
									"key": "cSRFToken",
									"value": "{{consent-request-consent-csrf}}",
									"type": "text"
								},
								{
									"key": "approved",
									"value": "allow",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:accounts.basic:read",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:transactions:read",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.009 - Creates JWT-Bearer Client Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2e90d39-fcaa-4e2a-b587-f26f79341993",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate client assertion is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('client-assertion');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "private-jwk",
									"value": "{{software-jwks-private}}",
									"type": "text"
								},
								{
									"key": "client-id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "token-endpoint",
									"value": "{{dh-idp-host}}/as/token.oauth2",
									"type": "text"
								},
								{
									"key": "kid",
									"value": "{{softwareId}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"tpp",
								"createClientAssertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.010 - Perform code exchange",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c7ae7d8-acc4-4e34-9990-c633fadc98a1",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate access_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"});",
									"pm.test(\"Validate id_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('id_token');",
									"});",
									"pm.test(\"Validate refresh_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('refresh_token');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
									"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
									"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{consent-request-authcode-callback-code}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{default-redirecturi}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{consent-client-assertion}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a8957bdb-4c1b-414e-8a1e-54d734370cb7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "05aa6ac3-f157-4f2e-aa0b-46af332c4cd6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S004 CDR Arrangement ID",
			"item": [
				{
					"name": "S004.T001 Obtain Access Token",
					"item": [
						{
							"name": "S004.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8462cd5-9ef5-4413-abb5-08d2549bd1c0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7017ac4-5e1b-48bf-b711-1ecc7d85dae4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestGenericJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cee7a6d8-49e9-4ed8-9387-555b79bb8511",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.004 - Provider username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8548030-a1ac-497a-9d38-25f27852d07c",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76a403cd-6f3e-4e93-8dda-eda5322ca3bf",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77978ed0-99ef-400b-8965-46497bd74c29",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50d8c0b7-8484-4efa-8d86-18d513b60e8a",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b0cfa45-ac4a-4f0a-8bf8-a9efa6cdac35",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e22e6349-bd74-4ba1-9aaa-aebaa6d67beb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e4cec4e5-9ea6-483e-952a-acb5bf315733",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T002 Introspect Tokens",
					"item": [
						{
							"name": "S004.T002.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31b24227-06a1-4bb1-aa0c-c252415d98ed",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/introspect.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.002 - Introspect Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "304b0992-f45c-4b46-b47c-4ef6d0dc7e99",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T003 Obtain Concurrent Access Token",
					"item": [
						{
							"name": "S004.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a78f2d52-63b9-4539-a6d4-1d00c651ba74",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10f47c46-3e95-4088-aae7-585c63b5aa70",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestGenericJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5487efc1-f0b3-438b-9dc7-f033e1dfb661",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.004 - Provider username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48252669-982f-4af7-80cb-6a422154a0ce",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "284cfc93-93d5-4acc-8e80-ef1888c63c69",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96db59ac-8631-4e9a-a641-d4e7c20e5cf7",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc16f553-7e86-4c54-91d9-1aa11cf3c1d7",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94918bad-e13b-48e2-b46a-fcb012598320",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token-concurrent\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token-concurrent\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token-concurrent\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "664e4214-109a-4fd5-8aa3-397e43b6b3b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f3c5a82c-da1b-4b82-a7d3-6a8c696f2748",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T004 Introspect Concurrent Tokens",
					"item": [
						{
							"name": "S004.T004.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb1764cc-701d-49dd-bcc5-b1038bc19990",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/introspect.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.002 - Introspect Refresh Token - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f496ddc-3b13-41f4-9983-c67e006872a4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.003 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0222471e-5f1d-48c0-850d-a7e0f29355a0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/introspect.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.004 - Introspect Refresh Token - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8cb84c4-c69e-4337-8f03-becda32417ca",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id-concurrent\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-concurrent}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T005 Obtain Access Token - Specify cdr_arrangement_id",
					"item": [
						{
							"name": "S004.T005.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b0aaeac-e227-43ff-a0ed-53ef763685da",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd654897-cb87-4663-b2ac-b2af791902f2",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"cdr_arrangement_id\":\"{{consent-cdr-arrangement-id}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestGenericJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.003 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f448611b-cbe6-46b4-83e6-ed227e555f0d",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.004 - Initiate PAR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d684906-89cc-43c7-8c7f-fd86bb2f813d",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request_uri');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-uri\", response[\"request_uri\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{consent-request-jwt}}",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://sso.data-holder.local/as/par.oauth2",
									"protocol": "https",
									"host": [
										"sso",
										"data-holder",
										"local"
									],
									"path": [
										"as",
										"par.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.005 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6379fbf5-44e3-4ac1-b67e-97c593e83519",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}?request_uri={{consent-request-uri}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
									],
									"query": [
										{
											"key": "request_uri",
											"value": "{{consent-request-uri}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.006 - Provider username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "736d2298-caa0-45de-9e03-019599b6a5fd",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.007 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4d77229-af41-4b18-a029-d2c636ad0a36",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.008 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26e1f779-405e-4520-91b4-74e027b99efc",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8716abce-e86f-4d86-bbe0-368a788e1ba7",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7da99b11-1c77-4221-bdd2-17849d139603",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token-specified\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token-specified\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token-specified\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "711a7cf4-6d93-4b6a-bc12-8be062e71c9d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d020b1e-d410-4a1e-9828-4ae3449d8028",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T006 Introspect Specified cdr_arrangement_id Tokens",
					"item": [
						{
							"name": "S004.T006.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d2ec2ac-9b28-48be-a849-4278f61729f8",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/introspect.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T006.002 - Introspect Refresh Token - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc321606-2985-4a06-8bba-2abffcd2afdc",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is the same\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response[\"cdr_arrangement_id\"]).to.equal(pm.environment.get(\"consent-cdr-arrangement-id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-specified}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T007 Refresh Concurrent Tokens",
					"item": [
						{
							"name": "S004.T007.001 - Refresh old token - should fail",
							"item": [
								{
									"name": "S004.T007.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "166b3d67-a76e-41bc-9c60-8b499b5b35b1",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec36e4e9-ac28-4091-a777-35e96bb4f9ac",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fdf3ad65-b688-4543-873b-045ee38e6aed",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b5798c9-1683-41f6-ae90-73f0a700e903",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T007.002 - Refresh new token - should pass",
							"item": [
								{
									"name": "S004.T007.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bc91876-2cb5-4af1-a2f9-6601d94fc65f",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.002.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8718cb87-3b6f-467b-87a2-831449201602",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-specified}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4bd23061-e26d-4e4e-bb6f-3bfb14a50089",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "37629093-f22d-4711-999e-4d57c50f04aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T007.003 - Refresh concurrent token - should pass",
							"item": [
								{
									"name": "S004.T007.003.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e85d7375-1313-4917-9064-45cb30f11b4c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.003.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f018313e-e55b-4567-b6c4-c8e10f1ab406",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-concurrent}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e54efcf1-4c23-4d6f-be1c-c0ee77cfe1ef",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8e9258f0-ffa7-42b2-8f53-b1f37bc68fc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5588568-6d0f-4cf3-9097-adf16083984f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "983551ab-88e7-4e11-b23b-a2e771cab322",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T008 Revoke Tokens via CDR Arrangement Endpoint",
					"item": [
						{
							"name": "S004.T008.001 Revoke arrangement 1",
							"item": [
								{
									"name": "S004.T008.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "138fb4c8-8242-44be-b1ca-67949800247b",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.001.002 - Revoke arrangement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e18ac21d-8117-4680-a600-cad69d788b42",
												"exec": [
													"pm.test(\"Validate response status=204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T008.002 Revoke arrangement 1 again - should fail",
							"item": [
								{
									"name": "S004.T008.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e2ac298-49e0-4b38-8684-34bc4024265c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.002.002 - Revoke arrangement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "570e71fb-6e71-40b4-bf1d-e1e720a2cb79",
												"exec": [
													"pm.test(\"Validate response status=422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5b310626-01c8-4b0c-9893-db66652b4e23",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c263a1e8-3ad0-43e3-927a-309ac04a102d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T008.003 Revoke arrangement 2",
							"item": [
								{
									"name": "S004.T008.003.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1be0abc-9273-45fb-ad3a-cdda708741b2",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.003.002 - Revoke arrangement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08f05b90-dfec-4737-a437-b0af52244893",
												"exec": [
													"pm.test(\"Validate response status=204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id-concurrent}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T008.004 - Refresh arrangment 2 token - should fail",
							"item": [
								{
									"name": "S004.T008.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fea40354-d0b7-4588-84ce-a8d5aefbb35e",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1e0b2a4-8417-4135-912a-fa25f4b14353",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-concurrent}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9fcd4e69-4a72-4490-9bbd-5a0ea199a290",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f82ed6b6-0228-4ce7-80f3-a62c673fdf1b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d9000251-06b1-4743-97b6-c1cb248ab64e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84c8a383-ddd2-4357-8add-43e894cbca99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T009 cdr_arrangement_id validation",
					"item": [
						{
							"name": "S004.T009.001 Validate standard authz request",
							"item": [
								{
									"name": "S004.T001.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6170e874-961c-4620-a001-41c938ec9702",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate kty is RSA\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.kty).to.equal('RSA');",
													"});",
													"pm.test(\"Validate algorithm is PS256\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.alg).to.equal('PS256');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var responseBlob = btoa(pm.response.text());",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"softwarestatement",
												"JWKS",
												"{{softwareId}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T001.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33bc9404-3d36-472b-98c5-2d19633ae740",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"cdr_arrangement_id\": \"xxx\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"requestGenericJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T001.003 - Initiate Consent Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "058c316e-7fac-4a10-8735-f1a079a55b25",
												"exec": [
													"pm.test(\"Validate response status=302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var locationHeader = pm.response.headers.get(\"Location\");",
													"    if(!locationHeader)",
													"        locationHeader = pm.response.headers.get(\"Referer\");",
													"",
													"    var locationParams = locationHeader.split(\"#\")[1];",
													"    const eachParamArray = locationParams.split('&');",
													"    let params = {};",
													"    eachParamArray.forEach((param) => {",
													"        const key = param.split('=')[0];",
													"        const value = param.split('=')[1];",
													"        Object.assign(params, {[key]: value});",
													"    });",
													"",
													"    pm.expect(params[\"error\"]).to.equal(\"server_error\");",
													"    pm.environment.set(\"consent-request-authcode-callback-error\", params[\"error\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-request-url}}",
											"host": [
												"{{consent-request-url}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bc4704c-0cb4-4f75-b26a-b991506fb025",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1773b2ad-58e4-492f-bc03-87ab309ecf2a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T009.002 Validate PAR",
							"item": [
								{
									"name": "S004.T005.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e4023d3-8f3c-481d-96b7-c51bc1952030",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate kty is RSA\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.kty).to.equal('RSA');",
													"});",
													"pm.test(\"Validate algorithm is PS256\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.alg).to.equal('PS256');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var responseBlob = btoa(pm.response.text());",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"softwarestatement",
												"JWKS",
												"{{softwareId}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T005.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "030da474-57a9-457b-a278-fff5f1ed0b0c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"cdr_arrangement_id\":\"xxxx\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"requestGenericJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T005.003 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19f0eccc-c08c-40d8-ba69-4f2b7324d66c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T005.004 - Initiate PAR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93116730-3821-448b-a569-649a5908b44a",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{consent-request-jwt}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://sso.data-holder.local/as/par.oauth2",
											"protocol": "https",
											"host": [
												"sso",
												"data-holder",
												"local"
											],
											"path": [
												"as",
												"par.oauth2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b7cbe7f-0ce1-4425-9795-5c8f9400e0f2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f0aa9c5-760c-4a94-9ce7-0c184b6bab42",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "106eec90-b3e9-43ee-96f0-aa9f9b057460",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "06f44887-be23-4f3b-8b3c-b096444e3df5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S005 Tokens",
			"item": [
				{
					"name": "S005.001 - ID_Token Tests",
					"item": [
						{
							"name": "Authorisation Endpoint",
							"item": [
								{
									"name": "S005.T001.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34dc1e07-1e1d-4445-82c7-7692cbc66018",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate kty is RSA\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.kty).to.equal('RSA');",
													"});",
													"pm.test(\"Validate algorithm is PS256\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.alg).to.equal('PS256');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var responseBlob = btoa(pm.response.text());",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"softwarestatement",
												"JWKS",
												"{{softwareId}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f215997-c441-4d55-aef5-6dcb3af57e7a",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"requestGenericJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.003 - Initiate Consent Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c894d7b7-9a0d-45e3-9857-563523395a58",
												"exec": [
													"",
													"",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-request-url}}",
											"host": [
												"{{consent-request-url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.004 - Provider username",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "812bf626-045e-4a6c-b1da-54c26d9a67a0",
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "$ok",
													"value": "clicked",
													"type": "text"
												},
												{
													"key": "subject",
													"value": "crn0",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
											"host": [
												"{{dh-idp-host}}{{consent-request-nonceurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.005 - Verify OTP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "299387ea-d5f5-482f-bc84-5ec7c9c96ef7",
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
													"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "$ok",
													"value": "clicked",
													"type": "text"
												},
												{
													"key": "CODE_VERIFICATION_VALUE",
													"value": "123456",
													"type": "text"
												},
												{
													"key": "CODE_VERIFICATION_STATE",
													"value": "true",
													"type": "text"
												},
												{
													"key": "CSRF_TOKEN",
													"value": "{{consent-request-otp-csrf}}",
													"type": "text"
												},
												{
													"key": "submitform",
													"value": "true",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
											"host": [
												"{{dh-idp-host}}{{consent-request-nonceurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.006 - Perform consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48486f06-0821-470f-ad5c-7cc5473797ff",
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var locationHeader = pm.response.headers.get(\"Location\");",
													"    if(!locationHeader)",
													"        locationHeader = pm.response.headers.get(\"Referer\");",
													"",
													"    var locationParams = locationHeader.split(\"#\")[1];",
													"    const eachParamArray = locationParams.split('&');",
													"    let params = {};",
													"    eachParamArray.forEach((param) => {",
													"        const key = param.split('=')[0];",
													"        const value = param.split('=')[1];",
													"        Object.assign(params, {[key]: value});",
													"    });",
													"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
													"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
													"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "accounts",
													"value": "{{consent-request-consent-account}}",
													"type": "text"
												},
												{
													"key": "cSRFToken",
													"value": "{{consent-request-consent-csrf}}",
													"type": "text"
												},
												{
													"key": "approved",
													"value": "allow",
													"type": "text"
												},
												{
													"key": "scopes",
													"value": "bank:accounts.basic:read",
													"type": "text"
												},
												{
													"key": "scopes",
													"value": "bank:transactions:read",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
											"host": [
												"{{dh-idp-host}}{{consent-request-nonceurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.007 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2da7ded-7689-4631-952c-1b9d28222258",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.008 - Perform code exchange",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c6723aa-581b-4e9c-8879-72fdf26f8995",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Validate id_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('id_token');",
													"});",
													"pm.test(\"Validate refresh_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('refresh_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
													"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{consent-request-authcode-callback-code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.009 - Download Enc Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83006d54-4311-4634-95c0-3b9d1cb7870c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var responseBlob = btoa(pm.response.text());",
													"    pm.environment.set(\"software-jwks-private-encryption\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private/alg",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"softwarestatement",
												"JWKS",
												"{{softwareId}}",
												"private",
												"alg"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.010 - Test ID Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8257c37f-c1b8-4612-9510-fc8c7f088160",
												"exec": [
													"",
													"//CDR ID Token OIDC Requirements",
													"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iss');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('sub');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iat');",
													"});",
													"",
													"//CDR ID Token FAPI-RW Requirements",
													"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('nonce');",
													"});",
													"",
													"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('s_hash');",
													"});",
													"",
													"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('c_hash');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-private-jwk",
												"value": "{{software-jwks-private-encryption}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{consent-request-id-token}}",
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/reflectIDToken",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"reflectIDToken"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Token End Point",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8238bfa9-89d8-4c2f-8846-3d4f3bc06aeb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "565ef882-26cc-42f2-983c-9738875e0c8b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S005.002 - Refresh Token Tests",
					"item": [
						{
							"name": "S006 Identifiers and Subject Types",
							"item": [
								{
									"name": "Sub Claim",
									"item": [
										{
											"name": "S006.T001.001 - Download Private Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "192347c7-d454-4463-9516-ed3eb4718500",
														"exec": [
															"pm.test(\"Validate response status=200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Validate kty is RSA\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response.kty).to.equal('RSA');",
															"});",
															"pm.test(\"Validate algorithm is PS256\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response.alg).to.equal('PS256');",
															"});",
															"pm.test(\"Set environment variables for next test\", function () {",
															"    var responseBlob = btoa(pm.response.text());",
															"    pm.environment.set(\"software-jwks-private\", responseBlob);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
													"host": [
														"{{cdr-register-testharness-host}}"
													],
													"path": [
														"softwarestatement",
														"JWKS",
														"{{softwareId}}",
														"private"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.002 - Generate Request JWT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8e2711f5-0fa8-4fa8-8865-2b5333a431b6",
														"exec": [
															"pm.test(\"Validate response status=200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Validate request-jwt property exists\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('request-jwt');",
															"});",
															"pm.test(\"Validate request-url property exists\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('request-url');",
															"});",
															"pm.test(\"Set environment variables for next test\", function () {",
															"    var response = pm.response.json();",
															"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "x-private-jwk",
														"type": "text",
														"value": "{{software-jwks-private}}"
													},
													{
														"key": "x-nonce",
														"value": "{{default-nonce}}",
														"type": "text"
													},
													{
														"key": "x-state",
														"value": "{{default-state}}",
														"type": "text"
													},
													{
														"key": "x-issuer",
														"value": "{{dcrClientId}}",
														"type": "text"
													},
													{
														"key": "x-duration-seconds",
														"value": "60",
														"type": "text"
													},
													{
														"key": "x-dataholder-authorization-endpoint",
														"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
														"type": "text"
													},
													{
														"key": "x-response-type",
														"value": "code id_token",
														"type": "text"
													},
													{
														"key": "x-scope",
														"value": "openid profile bank:accounts.basic:read bank:transactions:read",
														"type": "text"
													},
													{
														"key": "x-redirecturi",
														"value": "{{default-redirecturi}}",
														"type": "text"
													},
													{
														"key": "x-maxage",
														"value": "-1",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
													"host": [
														"{{cdr-register-testharness-host}}"
													],
													"path": [
														"testtool",
														"tpp",
														"requestGenericJWT"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.003 - Initiate Consent Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a355c39b-e811-40aa-b88d-136089a5abbe",
														"exec": [
															"",
															"",
															"pm.test(\"Set environment variables for next test\", function () {",
															"    const $ = cheerio.load(responseBody);",
															"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{consent-request-url}}",
													"host": [
														"{{consent-request-url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.004 - Provider username",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "71cfcd55-42c9-4112-a9eb-65b18dd27b84",
														"exec": [
															"pm.test(\"Set environment variables for next test\", function () {",
															"    const $ = cheerio.load(responseBody);",
															"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "$ok",
															"value": "clicked",
															"type": "text"
														},
														{
															"key": "subject",
															"value": "crn0",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
													"host": [
														"{{dh-idp-host}}{{consent-request-nonceurl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.005 - Verify OTP",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "126b1acc-3efd-471a-a7dc-a467d49a7785",
														"exec": [
															"pm.test(\"Set environment variables for next test\", function () {",
															"    const $ = cheerio.load(responseBody);",
															"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
															"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "$ok",
															"value": "clicked",
															"type": "text"
														},
														{
															"key": "CODE_VERIFICATION_VALUE",
															"value": "123456",
															"type": "text"
														},
														{
															"key": "CODE_VERIFICATION_STATE",
															"value": "true",
															"type": "text"
														},
														{
															"key": "CSRF_TOKEN",
															"value": "{{consent-request-otp-csrf}}",
															"type": "text"
														},
														{
															"key": "submitform",
															"value": "true",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
													"host": [
														"{{dh-idp-host}}{{consent-request-nonceurl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.006 - Perform consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e45b1d9-e71a-42d1-8ef0-4a5f99d8d0c0",
														"exec": [
															"pm.test(\"Set environment variables for next test\", function () {",
															"    var locationHeader = pm.response.headers.get(\"Location\");",
															"    if(!locationHeader)",
															"        locationHeader = pm.response.headers.get(\"Referer\");",
															"",
															"    var locationParams = locationHeader.split(\"#\")[1];",
															"    const eachParamArray = locationParams.split('&');",
															"    let params = {};",
															"    eachParamArray.forEach((param) => {",
															"        const key = param.split('=')[0];",
															"        const value = param.split('=')[1];",
															"        Object.assign(params, {[key]: value});",
															"    });",
															"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
															"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
															"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "accounts",
															"value": "{{consent-request-consent-account}}",
															"type": "text"
														},
														{
															"key": "cSRFToken",
															"value": "{{consent-request-consent-csrf}}",
															"type": "text"
														},
														{
															"key": "approved",
															"value": "allow",
															"type": "text"
														},
														{
															"key": "scopes",
															"value": "bank:accounts.basic:read",
															"type": "text"
														},
														{
															"key": "scopes",
															"value": "bank:transactions:read",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
													"host": [
														"{{dh-idp-host}}{{consent-request-nonceurl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.007 - Creates JWT-Bearer Client Assertion",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "25603e6d-b80f-4753-90f3-f7adc66072eb",
														"exec": [
															"pm.test(\"Validate response status=200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Validate client assertion is available\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('client-assertion');",
															"});",
															"pm.test(\"Set environment variables for next test\", function () {",
															"    var response = pm.response.json();",
															"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "private-jwk",
															"value": "{{software-jwks-private}}",
															"type": "text"
														},
														{
															"key": "client-id",
															"value": "{{dcrClientId}}",
															"type": "text"
														},
														{
															"key": "token-endpoint",
															"value": "{{dh-idp-host}}/as/token.oauth2",
															"type": "text"
														},
														{
															"key": "kid",
															"value": "{{softwareId}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
													"host": [
														"{{cdr-register-testharness-host}}"
													],
													"path": [
														"testtool",
														"tpp",
														"createClientAssertion"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.008 - Perform code exchange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b398d9f-5225-4615-ae0a-e885ec64be2f",
														"exec": [
															"pm.test(\"Validate response status=200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate id_token is available\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('id_token');",
															"});",
															"",
															"",
															"pm.test(\"Set environment variables for next test\", function () {",
															"    var response = pm.response.json();",
															"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
															"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
															"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
															"});",
															"",
															"",
															"",
															"function jwt_decode_payload(jwt) {",
															"    var parts = jwt.split('.'); // header, payload, signature",
															"    return JSON.parse(atob(parts[1]));",
															"}",
															"",
															"function jwt_decode_header(jwt) {",
															"    var parts = jwt.split('.'); // header, payload, signature",
															"    return JSON.parse(atob(parts[0]));",
															"}",
															"function jwt_parts(jwt) {",
															"    var parts = jwt.split('.'); // header, payload, signature",
															"    return parts.length;",
															"}",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "code",
															"value": "{{consent-request-authcode-callback-code}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{dcrClientId}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "{{default-redirecturi}}",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{consent-client-assertion}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
													"host": [
														"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.009 - Download Enc Private Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "90e60af4-c749-405d-8a14-2f7a895f675a",
														"exec": [
															"pm.test(\"Validate response status=200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Set environment variables for next test\", function () {",
															"    var responseBlob = btoa(pm.response.text());",
															"    pm.environment.set(\"software-jwks-private-encryption\", responseBlob);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private/alg",
													"host": [
														"{{cdr-register-testharness-host}}"
													],
													"path": [
														"softwarestatement",
														"JWKS",
														"{{softwareId}}",
														"private",
														"alg"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.010 - Test ID Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "941de390-88f1-47cd-89f3-1b6bf418e9c6",
														"exec": [
															"",
															"//CDR ID Token OIDC Requirements",
															"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('iss');",
															"",
															"});",
															"",
															"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('sub');",
															"",
															"});",
															"",
															"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('exp');",
															"",
															"});",
															"",
															"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('iat');",
															"});",
															"",
															"//CDR ID Token FAPI-RW Requirements",
															"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('nonce');",
															"});",
															"",
															"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('s_hash');",
															"});",
															"",
															"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
															"    var response = pm.response.json();",
															"    pm.expect(response).to.have.property('c_hash');",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-private-jwk",
														"value": "{{software-jwks-private-encryption}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{consent-request-id-token}}",
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{cdr-register-testharness-host}}/testtool/tpp/reflectIDToken",
													"host": [
														"{{cdr-register-testharness-host}}"
													],
													"path": [
														"testtool",
														"tpp",
														"reflectIDToken"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.011 - Call userinfo",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1180557e-f00f-4227-9e55-9519bf5f56fd",
														"exec": [
															"pm.test(\"Validate response status=200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"//CDR ID Token OIDC Requirements",
															"",
															"pm.test(\"Validate UserInfo Response has sub - REQUIRED for OIDC\", function () {",
															"    var response = pm.response.json();",
															"",
															"    pm.expect(response).to.have.property('sub');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{consent-request-access-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
													"host": [
														"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "S006.T001.012 - Get openid-configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "225eb70f-ae21-4edc-b9bb-38f7053bb4eb",
														"exec": [
															"pm.test(\"Validate response status=200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Validate Pairwise Pseudonymous Identifier (PPID) is configured\", function () {",
															"    var response = pm.response.json();",
															"    console.log(response.subject_types_supported);",
															"    pm.expect(response.subject_types_supported[0]).to.equal('pairwise');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dh-idp-host}}{{openid-configuration}}",
													"host": [
														"{{dh-idp-host}}{{openid-configuration}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S005.T002.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e42ebd3b-b12b-4b0a-af5a-bbc87b87b8f3",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8c1c965-fe8f-45e3-92e6-eef7ca116b13",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.003 - Download Enc Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f18b660b-073d-4347-bb3c-7f062e6d593e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private-encryption\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private/alg",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private",
										"alg"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.004 - Test ID Token Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "687e28ec-7c44-4c64-83ca-9d0622125c72",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private-encryption}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.005 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fa99fb4-4595-444d-99f3-78b2ddad7967",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.006 - Perform refresh token - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2305a75e-e2b0-4472-a5ae-c7211c1bdcbf",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f95d2054-9db7-4b61-9c3c-d717edc0e3f2",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.008 - Refresh Error Response - UnAuthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6624cd45-4f76-4db3-b9b3-838cfc169eb9",
										"exec": [
											"pm.test(\"Validate response status=401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "79e1ab78-f375-4213-8081-01b02fe1c59b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a915f1a-7dcf-4d79-ac9d-4be05ed77879",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "281febc9-6e5b-4f26-adcc-2d606e3ac2ae",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3f28778c-2e77-49cb-9087-d7acff8e441c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "938b3386-71a6-402a-98c7-b01f0c4fdc0e",
			"key": "cdr-register-testharness-host",
			"value": "http://sso.data-holder.local:8084"
		},
		{
			"id": "4413f47e-8dfd-453a-ba12-3d3efe179711",
			"key": "dh-idp-host",
			"value": "https://sso.data-holder.local"
		},
		{
			"id": "753fd902-91de-4b8e-902a-d6eda93c8ec6",
			"key": "dh-idp-register-endpoint",
			"value": "/as/clients.oauth2"
		},
		{
			"id": "ca9bea17-88b9-4d36-9d6a-b7f5122494c4",
			"key": "dh-idp-token-endpoint",
			"value": "/as/token.oauth2"
		},
		{
			"id": "c76b2a61-7427-4cfb-a5c6-edf4a12729d4",
			"key": "dh-audience",
			"value": "https://data-holder"
		},
		{
			"id": "f36f7841-1e23-4c34-923b-96352d8791e1",
			"key": "pki-basicheader",
			"value": "Basic cGtpdXNlcjphYmNEMzBmZw=="
		},
		{
			"id": "a8f64978-8775-4b55-8f2a-937f003fe5c9",
			"key": "default-nonce",
			"value": "ea18887b-8629-43f2-93e1-4346959fb2ec"
		},
		{
			"id": "f4842d67-5695-4ba6-a972-4382684ca967",
			"key": "default-state",
			"value": "887bea18-93e1-8629-43f2-59fb2ec43469"
		},
		{
			"id": "81ea3b19-b676-432c-9a4f-d9bc4c28c291",
			"key": "dh-idp-authorization-endpoint",
			"value": "/as/authorization.oauth2"
		},
		{
			"id": "12363f8c-074f-420f-82be-1638311b2339",
			"key": "default-redirecturi",
			"value": "https://httpbin.org/get"
		},
		{
			"id": "3b813fe9-b2af-4443-a662-81f4c78c7d8b",
			"key": "dh-idp-introspect-endpoint",
			"value": "/as/introspect.oauth2"
		},
		{
			"id": "dd014289-2626-4399-9498-232c35b2db54",
			"key": "dh-api-host",
			"value": "https://api.data-holder.local/cds-au"
		},
		{
			"id": "3e69b1a1-40d1-49e7-a94f-bf4a96a52d2c",
			"key": "dh-idp-revocation-endpoint",
			"value": "/as/revoke_token.oauth2"
		},
		{
			"id": "d5eec426-c4af-4df2-9b5b-02e017a99d48",
			"key": "dh-idp-userinfo-endpoint",
			"value": "/idp/userinfo.openid"
		},
		{
			"id": "f8ac55b0-958d-4eeb-8ec1-e6648b2f2213",
			"key": "dh-idp-cdrarrangement-endpoint",
			"value": "/arrangements"
		},
		{
			"id": "b6826df3-b33e-4059-82a3-999abe6e2414",
			"key": "openid-configuration",
			"value": "/.well-known/openid-configuration"
		}
	],
	"protocolProfileBehavior": {}
}