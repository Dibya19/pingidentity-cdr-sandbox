{
	"info": {
		"_postman_id": "b29c1024-200e-454c-bd23-96bf6ef03a39",
		"name": "Consent Flow v1.2 - CDR Register Test Harness v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "S001 Create Client",
			"item": [
				{
					"name": "S001.T001 Create Brand/Software",
					"item": [
						{
							"name": "S001.T001.001 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a7d592a-742b-40d6-ace9-25d34fc10044",
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8ca84e6-88c7-442c-ab8b-f8e80fb5bbda",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://httpbin.org/get\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient?pageSize=10000",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.002 - Get CDR Register Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9942f069-5857-47e9-abd4-e7fe6438132d",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate token_endpoint property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('token_endpoint');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerTokenEndpoint\", response.token_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/.well-known/openid-configuration",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.003 - Get CDR Register Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c689ad46-56b9-47a1-b64a-6b6915d77eac",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/as/token.oauth2",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.004 - Get SSA From Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79686d9f-59e4-42af-8fb6-df147c8f9b20",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"software-ssa\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.005 - Get Private JWK (non-standard)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "825bb4b4-be44-4331-82bf-08b62414ddfc",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.006 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21f7fa48-f5b5-4f3b-9221-7aac5a2ab7d3",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-dcr-requestjwt\", response[\"request-jwt\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{software-ssa}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"refresh_token\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://httpbin.org/get\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.007 - Call PingFederate DCR POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa713b0e-bc59-4321-bf70-a9fa2cf1e3c9",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://httpbin.org/get'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://httpbin.org/get');",
											"    ",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{software-dcr-requestjwt}}"
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "25088e0f-3707-4183-ae49-2688d73e9625",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "84ce105a-1255-492e-b38a-22d435a0fdb5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S002 Consent Flow - Happy Scenario",
			"item": [
				{
					"name": "S002.T001 Obtain Access Token",
					"item": [
						{
							"name": "S002.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "024e6d9a-ef7b-4274-8367-cd33a83d31e5",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54a5df89-0ea0-42ec-83bc-873f5a088939",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51799901-1a72-4198-8ce9-a26137e386dc",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b915060f-1550-4287-82fe-49683afb8649",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b8a8f06-8cfb-4311-9788-efbdf70c1e16",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4412d69d-b07e-450e-a23f-6c5cddbd5081",
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c55fb15-3953-4a9b-9645-6abd908e0a62",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86bd3987-8403-4c09-b16d-8fe8543206ec",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.008 - Test ID Token from Authz Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c62b4387-c70d-48f9-a480-ee593624cbf4",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-authcode-callback-id_token}}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34553cdf-a19c-4a4d-a76a-aa60815c9ed1",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0022e739-faa4-4987-ab63-fd87fb03eeee",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var atJson = jwt_decode_payload(response.access_token);",
											"    pm.environment.set(\"consent-request-access-token-sub\", atJson.sub);",
											"    pm.environment.set(\"consent-request-access-token-pfguid\", atJson.pf_guid);",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.011 - Test ID Token from Token Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d116523e-9368-404d-9aca-0bcda8f12548",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fa5de8fb-f6bc-455b-afbb-7c0dd61694d1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b72fe6f5-a59d-497f-a45a-c5ef41075d2b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T002 Introspect Tokens",
					"item": [
						{
							"name": "S002.T002.001 Introspect Refresh Token",
							"item": [
								{
									"name": "S002.T002.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2abcd41-13c1-4864-8208-547fbceb07ef",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T002.001.002 - Introspect Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a30fb091-7818-4997-a735-11334acccc7c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate exp is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"});",
													"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('cdr_arrangement_id');",
													"});",
													"pm.test(\"Validate active=true\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(true);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S003.T002.001 Introspect Access Token - Should fail",
							"item": [
								{
									"name": "S003.T002.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f00b5408-e84c-462b-8d32-b2d56c1a1274",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S003.T002.002.002 - Introspect Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a975702-2f1a-4f70-9217-41250830510b",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response active=false\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-access-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T003 Refresh Tokens",
					"item": [
						{
							"name": "S002.T003.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69cb819e-f832-409f-8f4b-690095d77921",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T003.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d74de39-d9f2-4954-a800-b0ae2f3181d9",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T003.003 - Test ID Token from Token Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0f8b864-c7b8-4182-985a-84e7577c9bc6",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70993f1b-065d-4986-b2fb-ed9ab9d6e118",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccb059e6-5c7d-4bc4-9c64-2184a11fdbd4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T004 Call Bank API's",
					"item": [
						{
							"name": "S002.T004.001 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af3a8358-075d-499a-ad38-6b8617fefc58",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5afcfaac-3350-4f8d-8ce0-fd777070c271",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.002 - Get account balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4690d795-c481-4018-911b-c1b87f6e879a",
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/balance",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"balance"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "567065a5-7637-446e-83cc-7f424d491f95",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a91e03d7-6ccd-40e6-a2af-8d30607f08c7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T005 Userinfo",
					"item": [
						{
							"name": "S002.T005.001.002 - Call userinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f50cfd2-823f-44db-bc3b-2a42931f96e4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81219046-a3a7-4567-9cac-b1ed16bd9bfe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ad4a7be-e5ae-487e-8de5-2fa3f04a8ef9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T006 Grant Management API",
					"item": [
						{
							"name": "S002.T006.001 - PF - Get User Grants",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89d4a4f3-962c-4875-b865-00c1d0f43ef0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.002 - PF - Get Active User Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea64061c-f898-419a-affa-79718931d2b9",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"type": "text",
										"value": "PingFederate"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.003 - ConsentAPI - Get Consent Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2442a0fb-8727-4a98-b882-db49652d5ee5",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.004 - ConsentAPI - Get All User Consent Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "689d52eb-ee0c-4a68-8e70-8084a57547c7",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.005 - ConsentAPI - User revoke consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "797466d5-8d6c-4848-ac94-a01ac93ff0f7",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"revoked\"\n}"
								},
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.006 - PF - Get Revoked User Grant (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fb62d48-ccab-4bf5-ba70-9474f48fd7fc",
										"exec": [
											"pm.test(\"Validate response status=404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"type": "text",
										"value": "PingFederate"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.007 - ConsentAPI - User reactivate consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf8d5d20-165b-408e-9117-998775025bbb",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"accepted\"\n}"
								},
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.008 - PF - Get Reactived User Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "257554df-9535-42cf-9f4c-384caafef217",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"type": "text",
										"value": "PingFederate"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T007 Revoke Tokens",
					"item": [
						{
							"name": "S002.T007.001 Revocation",
							"item": [
								{
									"name": "S002.T007.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ade617a2-6587-4e54-aa89-6d7d2e08d579",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.001.002 - Perform revoke token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35336f93-d478-4dbf-b567-b2a763736df9",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-revocation-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-revocation-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S002.T007.002 Refresh Tokens - should fail",
							"item": [
								{
									"name": "S002.T007.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d7f0569-feb4-430d-8bab-59e3eb1fb28d",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d895e980-1950-48c2-9ce5-dc657c1b4b4e",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "799194e3-c4e0-49b5-beb3-a05b0639a9f5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b16fb0b5-c66d-4986-becf-d0ea6dd400b3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S002.T007.003 - Query Consent API",
							"item": [
								{
									"name": "S002.T007.003.001 - PF - Get Revoked User Grant (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93062b89-c9f3-46cb-8d20-d9f39803b170",
												"exec": [
													"pm.test(\"Validate response status=404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{grant-management-user}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{grant-management-password}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-XSRF-HEADER",
												"type": "text",
												"value": "PingFederate"
											}
										],
										"url": {
											"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
											"host": [
												"{{dh-idp-host}}"
											],
											"path": [
												"pf-ws",
												"rest",
												"oauth",
												"users",
												"{{consent-request-access-token-sub}}",
												"grants",
												"{{consent-cdr-arrangement-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.003.001 - ConsentAPI - Get Consent Details (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9ce2609-243f-41cd-8ef3-a17bc9807060",
												"exec": [
													"pm.test(\"Validate response status=404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
											"host": [
												"{{dh-dir-host}}"
											],
											"path": [
												"consent",
												"v1",
												"consents",
												"{{consent-cdr-arrangement-id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "48d0a392-dcd0-4f1d-a595-c0d84d8219d2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69644ec0-5586-4021-8401-0d0a9fedb347",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ad879115-879b-4d0b-8a89-f6b1f39abc8d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b0784686-0bcc-4cbd-a2d5-6f718c5a59cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S003 - Push Authorization Request",
			"item": [
				{
					"name": "S003.T001.001 - Download Private Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a817a8e3-aaed-4eba-82d8-64035dab09ce",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
									"    pm.environment.set(\"software-jwks-private\", responseBlob);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"helper",
								"JWKS",
								"{{flowUUID-datarecipient}}",
								"private"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.002 - Create Request JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "651b748a-02f0-4186-9fe6-839994c08938",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request-jwt');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-private-jwk",
								"type": "text",
								"value": "{{software-jwks-private}}"
							},
							{
								"key": "x-nonce",
								"type": "text",
								"value": "{{default-nonce}}"
							},
							{
								"key": "x-state",
								"type": "text",
								"value": "{{default-state}}"
							},
							{
								"key": "x-issuer",
								"type": "text",
								"value": "{{dcrClientId}}"
							},
							{
								"key": "x-duration-seconds",
								"type": "text",
								"value": "60"
							},
							{
								"key": "x-dataholder-authorization-endpoint",
								"type": "text",
								"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							},
							{
								"key": "x-response-type",
								"type": "text",
								"value": "code id_token"
							},
							{
								"key": "x-scope",
								"type": "text",
								"value": "openid profile bank:accounts.basic:read bank:transactions:read"
							},
							{
								"key": "x-redirecturi",
								"type": "text",
								"value": "{{default-redirecturi}}"
							},
							{
								"key": "x-maxage",
								"type": "text",
								"value": "-1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"datarecipient",
								"requestJWT"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.003 - Creates JWT-Bearer Client Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a3de73d-0377-4391-80b4-d5a742c102fd",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate client assertion is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('client-assertion');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "private-jwk",
									"value": "{{software-jwks-private}}",
									"type": "text"
								},
								{
									"key": "client-id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "token-endpoint",
									"value": "{{dh-idp-host}}/as/par.oauth2",
									"type": "text"
								},
								{
									"key": "kid",
									"value": "{{softwareId}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"datarecipient",
								"createClientAssertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.004 - Initiate PAR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3054fc12-6323-45da-9137-c819f37179b9",
								"exec": [
									"pm.test(\"Validate response status=201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
									"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request_uri');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-uri\", response[\"request_uri\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "request",
									"value": "{{consent-request-jwt}}",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{consent-client-assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid bank:accounts.basic:read bank:transactions:read",
									"type": "text"
								},
								{
									"key": "response_type",
									"value": "code id_token",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dh-idp-host}}/as/par.oauth2",
							"host": [
								"{{dh-idp-host}}"
							],
							"path": [
								"as",
								"par.oauth2"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.005 - Initiate Consent Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a6a02b1-2208-4ffb-92b1-520aeb775e51",
								"exec": [
									"",
									"",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}?request_uri={{consent-request-uri}}&client_id={{dcrClientId}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							],
							"query": [
								{
									"key": "request_uri",
									"value": "{{consent-request-uri}}"
								},
								{
									"key": "client_id",
									"value": "{{dcrClientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.006 - Provide username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0315ce39-3fbe-4099-b657-71838ae58627",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "crn0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.007 - Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c720d4c3-b9cd-4236-83b8-cd1e331b915b",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
									"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_VALUE",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_STATE",
									"value": "true",
									"type": "text"
								},
								{
									"key": "CSRF_TOKEN",
									"value": "{{consent-request-otp-csrf}}",
									"type": "text"
								},
								{
									"key": "submitform",
									"value": "true",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.008 - Load Consent Agentless App",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e46a189-8b3e-4694-9dc2-baa255039988",
								"exec": [
									"",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
									"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
									"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "allowInteraction",
									"value": "true",
									"type": "text"
								},
								{
									"key": "connectionId",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "resumePath",
									"value": "{{consent-request-nonceurl}}",
									"type": "text"
								},
								{
									"key": "reauth",
									"value": "false",
									"type": "text"
								},
								{
									"key": "REF",
									"value": "{{consent-ref}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{consent-action}}",
							"host": [
								"{{consent-action}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.008 - Perform consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e1747e5-2e46-4402-ba8f-d7d30e4ecfb5",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var locationHeader = pm.response.headers.get(\"Location\");",
									"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accounts",
									"value": "{{consent-request-consent-account}}",
									"type": "text"
								},
								{
									"key": "cSRFToken",
									"value": "{{consent-request-consent-csrf}}",
									"type": "text"
								},
								{
									"key": "approved",
									"value": "allow",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:accounts.basic:read",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:transactions:read",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{consent-request-consent-completeurl}}",
							"host": [
								"{{consent-request-consent-completeurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.008 - Follow REF Redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f92ce48-e874-4e2b-879b-ef5aa6a3022c",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var locationHeader = pm.response.headers.get(\"Location\");",
									"    if(!locationHeader)",
									"        locationHeader = pm.response.headers.get(\"Referer\");",
									"",
									"    var locationParams = locationHeader.split(\"#\")[1];",
									"    const eachParamArray = locationParams.split('&');",
									"    let params = {};",
									"    eachParamArray.forEach((param) => {",
									"        const key = param.split('=')[0];",
									"        const value = param.split('=')[1];",
									"        Object.assign(params, {[key]: value});",
									"    });",
									"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
									"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
									"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
									"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{consent-ref-redirect}}",
							"host": [
								"{{consent-ref-redirect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.009 - Creates JWT-Bearer Client Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38077e1b-a78a-4b7a-8954-5a520483d769",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate client assertion is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('client-assertion');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "private-jwk",
									"value": "{{software-jwks-private}}",
									"type": "text"
								},
								{
									"key": "client-id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "token-endpoint",
									"value": "{{dh-idp-host}}/as/token.oauth2",
									"type": "text"
								},
								{
									"key": "kid",
									"value": "{{softwareId}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"datarecipient",
								"createClientAssertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.010 - Perform code exchange",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83f5414e-2ef5-4c40-ab62-54138833db20",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
									"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
									"});",
									"pm.test(\"Validate access_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"});",
									"pm.test(\"Validate id_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('id_token');",
									"});",
									"pm.test(\"Validate refresh_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('refresh_token');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
									"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
									"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{consent-request-authcode-callback-code}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{default-redirecturi}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{consent-client-assertion}}",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{pkce-challenge-s256}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "55b8e9d9-ce8a-46a1-87ee-2447c10f15e2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "779d163b-3f6a-4168-ac95-e746adb70cd3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S004 CDR Arrangement ID",
			"item": [
				{
					"name": "S004.T001 Obtain Access Token",
					"item": [
						{
							"name": "S004.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "252dbc5f-f092-47be-9880-127698128ae4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f0e7429-66e9-4281-8e17-2c89dd6214d2",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f38cf9a-b15d-4c42-bf51-f826977eddbe",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c28cd1e8-198f-427e-b71f-5203ea4b38f0",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fc22f70-94b7-48e5-828f-62d02cc34e1c",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7738a1f1-ac47-4233-9cd1-9b0beda190aa",
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "175f0fe8-c3ff-4486-a70a-e7ccf8510d4b",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "143933e7-8f01-4a77-af3a-1bc6739f9a9d",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ac1fe71-8bcc-4ad7-8bb3-3c17784803ab",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "780e755a-1190-4ac5-9a06-574abd85ff3a",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ca8de46-418d-493c-a663-a2c372a2204d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "839e898f-0581-480b-9daf-d71e2505a53e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T002 Introspect Tokens",
					"item": [
						{
							"name": "S004.T002.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b6621c5-e734-4927-a134-a2c84b100e25",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.002 - Introspect Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eaf4ddf-649e-4983-a237-f3fd371ef4ec",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T003 Obtain Concurrent Access Token",
					"item": [
						{
							"name": "S004.T003.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "329cfd2e-7911-42c1-8dff-8ba5a2eb3e1b",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842d1822-8f19-4988-93c5-f9590d9de235",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "894c28c8-3bb3-437a-ab70-dff89222df3f",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59cd3e38-bf13-40dc-984b-ce3d24d2ac44",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e67569cc-0693-4bab-a8c4-7bc4630e5fae",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "136c1464-ec92-4cf5-943b-1f44677bd10f",
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a624df51-ae76-491c-9f56-8b2dec3986ff",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "872eadb4-5036-4db0-ab60-f24fef80bdf4",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc344f49-7aff-429e-9f99-4a30499f2d0e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "684fbb26-fcf8-4874-b641-25b079412874",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token-concurrent\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token-concurrent\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token-concurrent\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0a46b0d0-8ee2-43db-9557-8c17e7b7bb0d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0c865088-377e-4ef4-83e3-addfadd9db65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T004 Introspect Concurrent Tokens",
					"item": [
						{
							"name": "S004.T004.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a89711d-82fe-472c-9136-1d0a6b61489f",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.002 - Introspect Refresh Token - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a07ed275-ff06-4c77-b545-a81a83c09646",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.003 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb8eef9e-9555-4632-b4a2-bc233a0d9946",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.004 - Introspect Refresh Token - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e76c2b0c-73f3-4998-abc2-0fb9eb8bd991",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id-concurrent\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-concurrent}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T005 Obtain Access Token - Specify cdr_arrangement_id",
					"item": [
						{
							"name": "S004.T005.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4ab435c-d007-48fd-8aa0-7a8a3cfc9d82",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1ce7b48-acc4-4ce4-bfc6-3e7dfe00781c",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"cdr_arrangement_id\":\"{{consent-cdr-arrangement-id}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.003 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "402d819d-e823-45bd-8d1b-18c577b29b02",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.004 - Initiate PAR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8e195d8-3128-4a3b-acc6-b15b59091695",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request_uri');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-uri\", response[\"request_uri\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{consent-request-jwt}}",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code id_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}/as/par.oauth2",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"as",
										"par.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.005 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c90dfd8-4f8d-4b58-b476-838e92232aa5",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}?request_uri={{consent-request-uri}}&client_id={{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
									],
									"query": [
										{
											"key": "request_uri",
											"value": "{{consent-request-uri}}"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.006 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80055c3a-ba51-4d1d-838d-785cf8457e80",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.007 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "997329f3-3f57-4c26-bfd6-f4b6b0a0380c",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.008 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca6696a7-96bc-4b0d-8adb-7ba5ed4a79c7",
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.008 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02bc7031-6f2a-4abe-9c47-3f055c0d4948",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23ce0b90-2d51-4d39-a6ba-b4466145a4ed",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a218422-830f-4e5e-bf16-4703188320e0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "814f8cac-fbea-433a-8f15-6c7a454627a6",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token-specified\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token-specified\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token-specified\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d0523e5f-387e-47e5-bbe1-f4640f82e69f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47bbb600-a525-4f96-9f41-a6a6467871f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T006 Introspect Specified cdr_arrangement_id Tokens",
					"item": [
						{
							"name": "S004.T006.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6220077c-b678-4cb0-855e-054f1e7b2bd6",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T006.002 - Introspect Refresh Token - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34c9bd44-04dc-4ada-8e60-b18980dd87d1",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is the same\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response[\"cdr_arrangement_id\"]).to.equal(pm.environment.get(\"consent-cdr-arrangement-id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-specified}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T007 Refresh Concurrent Tokens",
					"item": [
						{
							"name": "S004.T007.001 - Refresh old token - should fail",
							"item": [
								{
									"name": "S004.T007.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bdb69a1-25f5-44e0-bfee-babcd2134a4c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5e168d6-b786-4112-8ca4-ecec1b61f0b9",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bd5fafd8-9c9d-4ec4-9988-22a8921f8d3e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fe6c15a9-5153-4a55-a74c-3f00babf1c45",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T007.002 - Refresh new token - should pass",
							"item": [
								{
									"name": "S004.T007.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7067d65a-cd1e-4462-a3da-89e1449f9a28",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.002.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47975ffd-29d9-43e3-840a-031ff96b104f",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-specified}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4a4c41a-54eb-43c1-a23a-823342e5b6ea",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53236645-72c6-489e-a301-ba461e4e0b3d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T007.003 - Refresh concurrent token - should pass",
							"item": [
								{
									"name": "S004.T007.003.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77ab5bff-3c7f-42e2-a54c-273bd5448d04",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.003.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89fa86c7-c2be-497f-b3ee-788fc77b8dfe",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-concurrent}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dba166b8-6ebb-4f10-98de-f9e0951f0518",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "87a73e6e-9787-470f-9c7f-65756f3cebe2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "077916e3-3997-4480-9f8c-a1587fd59e82",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88a88508-69b8-42e0-8fa2-97191e144ac0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T008 Revoke Tokens via CDR Arrangement Endpoint",
					"item": [
						{
							"name": "S004.T008.001 Revoke arrangement 1",
							"item": [
								{
									"name": "S004.T008.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cfa2780-e527-4519-bc2a-d4f3f82bcbc6",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.001.002 - Revoke arrangement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "528dd453-1106-41b4-9b9b-42e610847257",
												"exec": [
													"pm.test(\"Validate response status=204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T008.002 Revoke arrangement 1 again - should fail",
							"item": [
								{
									"name": "S004.T008.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1799e03f-ce98-437f-8757-30e3efa517f2",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.002.002 - Revoke arrangement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02f9a49d-6bcd-45f2-bfbe-4ed19d50de34",
												"exec": [
													"pm.test(\"Validate response status=422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "735a3ec9-2948-43da-908a-d0526eab611b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "97396211-7ba1-4fe0-bc31-23487a351a31",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T008.003 Revoke arrangement 2",
							"item": [
								{
									"name": "S004.T008.003.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8e0fe17-22d4-4e8d-bcbd-e1dfc27ffedf",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.003.002 - Revoke arrangement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41d3f3ca-da1d-4661-a14e-23d8fc0806ca",
												"exec": [
													"pm.test(\"Validate response status=204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id-concurrent}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T008.004 - Refresh arrangment 2 token - should fail",
							"item": [
								{
									"name": "S004.T008.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07fc13b7-b43b-471d-bc54-f7ba7065a68c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa9e5e95-a5b6-4f6b-b92c-f5f6b275dee8",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-concurrent}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "24e1c657-e626-4ac5-8e17-d62f701c196d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51f12310-687e-4064-bbdb-9a1cac9aa927",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35322a44-576d-40a9-af0d-21a940b0ed3f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9a884fa2-18e9-4c24-8b85-d1d26340270e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S004.T009 cdr_arrangement_id validation",
					"item": [
						{
							"name": "S004.T009.001 Validate standard authz request",
							"item": [
								{
									"name": "S004.T009.001.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de39441e-c9e4-4c91-a599-05add427eda1",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"helper",
												"JWKS",
												"{{flowUUID-datarecipient}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.001.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1eab0e1-0fd2-4f2d-b350-563460397262",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"cdr_arrangement_id\": \"xxx\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"requestJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.001.003 - Initiate Consent Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b68a721f-817b-4eaf-832b-7bb2704ef455",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-request-url}}",
											"host": [
												"{{consent-request-url}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a1a0573-06a5-45b4-96cc-1a7fa53e242a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d0e1f05-a87a-45d3-92b9-eb4f80b6849f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S004.T009.002 Validate PAR",
							"item": [
								{
									"name": "S004.T009.002.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67d221c6-422d-45af-99e0-9c243dc3ccc8",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"helper",
												"JWKS",
												"{{flowUUID-datarecipient}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.002.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31690589-54a1-441f-bf2b-e3b5c15838e7",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"cdr_arrangement_id\":\"xxxx\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"requestJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.002.003 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6a4ef91-97ad-4fb8-94ba-23e578e8d943",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.002.004 - Initiate PAR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62df4200-ab34-4cc4-a58c-b4e8e7e61dc0",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{consent-request-jwt}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}/as/par.oauth2",
											"host": [
												"{{dh-idp-host}}"
											],
											"path": [
												"as",
												"par.oauth2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b7eadd3-5d66-48d9-811b-e89f73bf5415",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71293e2d-074a-4866-936f-c75363a7f37d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "da79959f-af5e-4088-991f-0b786ef9552d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "93e36c43-c13b-4407-993e-fb094690ca5c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S005 Tokens",
			"item": [
				{
					"name": "S005.001 - ID_Token Tests",
					"item": [
						{
							"name": "Authorisation Endpoint",
							"item": [
								{
									"name": "S005.T001.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26d600e8-f661-4be1-9ce0-570e18c0a572",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"helper",
												"JWKS",
												"{{flowUUID-datarecipient}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f394c52-f16f-4f1b-a17c-fae4f2a9675c",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"requestJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.003 - Initiate Consent Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8586cb0-fcb4-4826-8c78-15b239ff7c66",
												"exec": [
													"",
													"",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-request-url}}",
											"host": [
												"{{consent-request-url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.004 - Provide username",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "992a12bc-192f-41a2-887d-a0b006fe2714",
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "$ok",
													"value": "clicked",
													"type": "text"
												},
												{
													"key": "subject",
													"value": "crn0",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
											"host": [
												"{{dh-idp-host}}{{consent-request-nonceurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.005 - Verify OTP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a35b3367-9b1e-447b-ab43-146b0139937b",
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
													"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "$ok",
													"value": "clicked",
													"type": "text"
												},
												{
													"key": "CODE_VERIFICATION_VALUE",
													"value": "123456",
													"type": "text"
												},
												{
													"key": "CODE_VERIFICATION_STATE",
													"value": "true",
													"type": "text"
												},
												{
													"key": "CSRF_TOKEN",
													"value": "{{consent-request-otp-csrf}}",
													"type": "text"
												},
												{
													"key": "submitform",
													"value": "true",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
											"host": [
												"{{dh-idp-host}}{{consent-request-nonceurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.006 - Load Consent Agentless App",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8afdc67c-e612-416a-852a-94f29c9cdff4",
												"exec": [
													"",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
													"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
													"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "allowInteraction",
													"value": "true",
													"type": "text"
												},
												{
													"key": "connectionId",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "resumePath",
													"value": "{{consent-request-nonceurl}}",
													"type": "text"
												},
												{
													"key": "reauth",
													"value": "false",
													"type": "text"
												},
												{
													"key": "REF",
													"value": "{{consent-ref}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{consent-action}}",
											"host": [
												"{{consent-action}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.006 - Perform consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9b64f69-697d-448f-8423-6c2c014db21e",
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var locationHeader = pm.response.headers.get(\"Location\");",
													"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false,
										"followRedirects": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "accounts",
													"value": "{{consent-request-consent-account}}",
													"type": "text"
												},
												{
													"key": "cSRFToken",
													"value": "{{consent-request-consent-csrf}}",
													"type": "text"
												},
												{
													"key": "approved",
													"value": "allow",
													"type": "text"
												},
												{
													"key": "scopes",
													"value": "bank:accounts.basic:read",
													"type": "text"
												},
												{
													"key": "scopes",
													"value": "bank:transactions:read",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{consent-request-consent-completeurl}}",
											"host": [
												"{{consent-request-consent-completeurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.006 - Follow REF Redirect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17b31305-2a95-4b73-8d10-6046df816c64",
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var locationHeader = pm.response.headers.get(\"Location\");",
													"    if(!locationHeader)",
													"        locationHeader = pm.response.headers.get(\"Referer\");",
													"",
													"    var locationParams = locationHeader.split(\"#\")[1];",
													"    const eachParamArray = locationParams.split('&');",
													"    let params = {};",
													"    eachParamArray.forEach((param) => {",
													"        const key = param.split('=')[0];",
													"        const value = param.split('=')[1];",
													"        Object.assign(params, {[key]: value});",
													"    });",
													"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
													"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
													"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
													"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-ref-redirect}}",
											"host": [
												"{{consent-ref-redirect}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.008 - Test ID Token from Authz Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e07d0a6-84fc-438e-8b9e-75aefd23fd91",
												"exec": [
													"",
													"//CDR ID Token OIDC Requirements",
													"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iss');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('sub');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iat');",
													"});",
													"",
													"//CDR ID Token FAPI-RW Requirements",
													"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('nonce');",
													"});",
													"",
													"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('s_hash');",
													"});",
													"",
													"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('c_hash');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-private-jwk",
												"value": "{{software-jwks-private}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{consent-request-authcode-callback-id_token}}",
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"reflectIDToken"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.009 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7472d686-d69e-493f-9d8b-ddbea036bde1",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.010 - Perform code exchange",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bc58dbb-0416-4b24-8150-d90cde1a43ba",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Validate id_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('id_token');",
													"});",
													"pm.test(\"Validate refresh_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('refresh_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
													"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{consent-request-authcode-callback-code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{pkce-challenge-s256}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.011 - Test ID Token from Token Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59cc7338-3f4d-4f0f-bed1-939f26bbd0ce",
												"exec": [
													"",
													"//CDR ID Token OIDC Requirements",
													"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iss');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('sub');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iat');",
													"});",
													"",
													"//CDR ID Token FAPI-RW Requirements",
													"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('nonce');",
													"});",
													"",
													"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('s_hash');",
													"});",
													"",
													"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('c_hash');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-private-jwk",
												"value": "{{software-jwks-private}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{consent-request-id-token}}",
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"reflectIDToken"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Token End Point",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea736c01-91a1-4a98-9cda-3633c9dfc40b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b83974b5-09ca-412f-b9d6-05a536a9213a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S005.002 - Refresh Token Tests",
					"item": [
						{
							"name": "S005.T002.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13011715-2351-49cb-8ebb-6f0f1f50c8c9",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3ca22ab-fc95-464e-b3fa-e527b0aebdb5",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.004 - Test ID Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bd00272-8e8e-40f7-9eb5-a0eda72cd714",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.005 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98cc8e73-c6a1-49bd-b66e-2e3beff4a4c7",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.006 - Perform refresh token - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b5e0cb3-c968-4198-b465-2a43e541abec",
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82d1a96e-6756-4da7-bc7f-e14491b294c3",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.008 - Refresh Error Response - UnAuthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6052f2b-4c37-4531-bc33-f3b5065fdb70",
										"exec": [
											"pm.test(\"Validate response status=401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9ebdfa64-6076-4f6a-9a70-897b38206add",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db181ba0-2a0b-4e8a-b69a-89c3cbba8c3d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S006 Identifiers and Subject Types",
			"item": [
				{
					"name": "Sub Claim",
					"item": [
						{
							"name": "S006.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19288b0f-d0f4-4976-8abc-d3227d65790f",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8c5952e-efa6-4b28-8975-dd55963e361b",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1abfdd3-49da-4dfc-b3f0-163f73c9ff61",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a9c1b0a-5952-4c0c-99f7-466d177cd560",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4759e30b-5eae-4c7b-a971-318a6d576621",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75001a90-1318-4e62-8f10-934933ab730a",
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c72624bd-a2f4-4489-a066-0f76997ba276",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a20cecd-8cb2-4d2e-ba21-cff0b8db7f58",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc497aa0-f67b-4885-bea1-4920f9ff8d92",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35724c54-e513-4ca7-93ee-bd261f7aa303",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});",
											"",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.010 - Test ID Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6bf5593-88dc-45d7-b2a7-796d8a792625",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}",
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.011 - Call userinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dce6c49-1354-45a3-a086-07a90a398bd4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//CDR ID Token OIDC Requirements",
											"",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"",
											"pm.test(\"Validate UserInfo Response has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"",
											"    pm.expect(response).to.have.property('sub');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.012 - Get openid-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb75d1cd-9c8c-4073-9d7c-b61ec17224ac",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate Pairwise Pseudonymous Identifier (PPID) is configured\", function () {",
											"    var response = pm.response.json();",
											"    console.log(response.subject_types_supported);",
											"    pm.expect(response.subject_types_supported[0]).to.equal('pairwise');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dh-idp-host}}{{openid-configuration}}",
									"host": [
										"{{dh-idp-host}}{{openid-configuration}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S007 Authentication Flow",
			"item": [
				{
					"name": "S007.T000 Run the S001.T001 Create Client first",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf0525d3-c340-4bab-8ac4-55e8cb3ffd44",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "78e65c17-f5a6-4fab-8845-fa3d5d354be8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S007.T001 Verify Respone Type of Access Token",
					"item": [
						{
							"name": "S007.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f69495fc-76b2-4f18-a39e-1af40f221726",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.002 - Generate Good Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1b1d701-528e-4560-bfcf-cfea2c55fce2",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77ca988d-55cc-4be5-8ddb-68b0e8af512a",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.004 - Generate Negative Request JWT - code id_token token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c45b4407-8c36-4436-b1ea-cac3bb2189c3",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.005 - Initiate Negative Consent Request - code id_token token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25bac52f-fb25-4d1b-95fc-1cf7738f6cbb",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.006 - Generate Negative Request JWT - code token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4db16826-bbed-457b-9799-c23277e6d52e",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.007 - Initiate Negative Consent Request - code token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b5c0bf6-e7d2-410a-a89e-609aad5393f9",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd44bb79-a5ac-4a61-a454-e5611aabe86f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "48fe32a3-a1dc-4461-b6e2-cd53f98f3980",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "791cad31-bd7a-4e5a-bc47-8704952be663",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1bf181d6-2ced-41d3-ba6e-9d62654ed227",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S008 Client Authentication",
			"item": [
				{
					"name": "S008.T000 Run the S001.T001 Create Client first",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34a76dbf-a4f7-483a-bad1-1c0bb8e677d3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aef15f8c-458d-4ddf-ab4d-d1ad99aaee77",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S008.T001 Obtain Access Token",
					"item": [
						{
							"name": "S008.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ebfd278-4f64-4e72-b3a0-d8755e4171a7",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf34e0e7-5b8f-40e4-a681-b5570b328c95",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3041a658-67d5-4d43-8355-41c4686787cb",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebd7dbd9-5f2f-4aaa-a002-0269ed0c310e",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46fb0b1e-c86f-4a57-8a23-cee54ef3b6ec",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ae641ba-7d38-4b46-b3c7-757acfa20d55",
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bb7e997-b5d6-4b3d-823d-7521e93211c1",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d92ef77-cb35-4c66-9c88-af89801df646",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.008 - Test ID Token from Authz Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab6ca2ae-4512-42a2-94e5-7b914c73d3fd",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-authcode-callback-id_token}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07a0ed0b-203c-4c86-a804-4d4ae972151d",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe994a51-6fcc-41c5-ae12-a9e9f8c617dd",
										"exec": [
											"_.test_http_status(200,pm.response);",
											"var response_params = ['access_token','id_token','refresh_token'];",
											"_.test_params_object(response_params, pm.response.json(),\"is in response\");",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var atJson = _.jwt_decode_payload(response.access_token);",
											"    pm.environment.set(\"consent-request-access-token-sub\", atJson.sub);",
											"    pm.environment.set(\"consent-request-access-token-pfguid\", atJson.pf_guid);",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"var request_params = [ 'client_id', 'grant_type', 'code', 'client_assertion', 'client_assertion_type' ]; ",
											"_.test_params_object(request_params,request.data,\"is in request\");",
											"",
											"var client_assertion_payload = jwt_decode_payload(request.data.client_assertion);",
											"var request_params = [ 'iss', 'aud', 'exp', 'jti', 'iat' ]; ",
											"_.test_params_object(request_params,client_assertion_payload,\"is in client_assertion\");",
											"//console.log(jwt_decode_payload(request.data.client_assertion));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.011 - Test ID Token from Token Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6698588e-1709-4181-8799-ca279563554f",
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7be5f20a-c175-467f-91d0-14fe37185d1d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "136408ca-730f-44c6-84bd-220102aa129d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e54518cf-8e95-4c48-a465-da74652a585c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e1d9b21-d9b2-4a62-a783-5b959448f15a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "175f501b-aec8-45c3-b229-da06b8da273f",
				"type": "text/javascript",
				"exec": [
					"Object.prototype.jwt_decode_payload = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return JSON.parse(atob(parts[1]));",
					"}",
					"",
					"Object.prototype.jwt_decode_header = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return JSON.parse(atob(parts[0]));",
					"}",
					"Object.prototype.jwt_parts = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return parts.length;",
					"}",
					"Object.prototype.test_http_status = function(http_status,response) {",
					"    pm.test(\"Validate response status=\"+http_status, function () {",
					"        response.to.have.status(http_status);",
					"    });",
					"}",
					"",
					"Object.prototype.test_jwt_alg = function(alg,jwt_header) {",
					"    pm.test(\"Validate JWT ALG =\"+alg, function () {",
					"        pm.expect(jwt_header.alg).to.eql(alg);",
					"    });",
					"}",
					"",
					"Object.prototype.test_params_object = function(params,object,suffix){",
					"    for (i=0; i<params.length; i++) {",
					"        pm.test(\"Validate \"+ params[i] + \" \" + suffix, function () {",
					"            pm.expect(object).to.have.property(params[i]);",
					"        });",
					"    }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9bcb9962-9c95-4f7a-916f-b8f2713e346c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7bc30f3b-5bdb-4471-a11c-02fc37866694",
			"key": "cdr-register-testharness-host",
			"value": "https://mockregister.data-holder.local"
		},
		{
			"id": "482c20e5-d517-4168-8a8f-22c2e8072b72",
			"key": "dh-idp-host",
			"value": "https://sso.data-holder.local"
		},
		{
			"id": "55309f38-c59b-46b7-a503-24c90fe3ecc2",
			"key": "dh-idp-register-endpoint",
			"value": "/as/clients.oauth2"
		},
		{
			"id": "62b2e0cc-5f0f-4cd5-9104-54876838c178",
			"key": "dh-idp-token-endpoint",
			"value": "/as/token.oauth2"
		},
		{
			"id": "9b0bfe73-345f-43b5-ab6b-41ac48ec1447",
			"key": "pki-basicheader",
			"value": "Basic cGtpdXNlcjphYmNEMzBmZw=="
		},
		{
			"id": "46c1474b-b670-4244-90cb-f6dd4bc78206",
			"key": "default-nonce",
			"value": "ea18887b-8629-43f2-93e1-4346959fb2ec"
		},
		{
			"id": "bd31ca0b-15bd-4858-b86f-b9f05a78dcb7",
			"key": "default-state",
			"value": "887bea18-93e1-8629-43f2-59fb2ec43469"
		},
		{
			"id": "1675ca6a-dd90-4b64-813d-75dec0360805",
			"key": "dh-idp-authorization-endpoint",
			"value": "/as/authorization.oauth2"
		},
		{
			"id": "26077c3c-9cb4-46a9-acc3-c3d3c39ded77",
			"key": "default-redirecturi",
			"value": "https://httpbin.org/get"
		},
		{
			"id": "8f7dfd5d-842d-46d5-b609-2a4c7c133cc5",
			"key": "dh-idp-introspect-endpoint",
			"value": "/as/introspect.oauth2"
		},
		{
			"id": "89f0d6ee-af3c-4722-968f-144afcc1492f",
			"key": "dh-api-host",
			"value": "https://api.data-holder.local/cds-au"
		},
		{
			"id": "c379f392-7f6b-4ce8-b4a7-430084d5569e",
			"key": "dh-idp-revocation-endpoint",
			"value": "/as/revoke_token.oauth2"
		},
		{
			"id": "75a8dc66-4aa7-4d1c-802a-cbb2adef83e8",
			"key": "dh-idp-userinfo-endpoint",
			"value": "/idp/userinfo.openid"
		},
		{
			"id": "73474eab-dca3-4ed1-a62d-129245c3b5c5",
			"key": "dh-idp-cdrarrangement-endpoint",
			"value": "/arrangements"
		},
		{
			"id": "6116cc15-859f-4bfd-a104-1ba5e62c1c06",
			"key": "openid-configuration",
			"value": "/.well-known/openid-configuration"
		},
		{
			"id": "d191bf28-1ccc-4b30-852e-177bdf085c03",
			"key": "grant-management-user",
			"value": "Administrator"
		},
		{
			"id": "b2151db0-e6be-4357-a3e3-2ede0c97d2a7",
			"key": "grant-management-password",
			"value": "2FederateM0re"
		},
		{
			"id": "3b1b9862-d9c7-4a5c-9ea1-ef4ddc5991ef",
			"key": "dh-dir-host",
			"value": "https://pd.data-holder.local"
		},
		{
			"id": "4fa0d158-7e2c-4056-9ddc-3aaf7b448a32",
			"key": "pkce-challenge",
			"value": "PNU4mSDcKWgrG1Sl8C7UT9n0PyvOJEuc6JV7r9YcCyE"
		},
		{
			"id": "c7df6c87-270d-4d69-9e14-0118ea53ac6b",
			"key": "pkce-challenge-s256",
			"value": "iE6J6yykJ68pWqYooNvqp17xNF_54jOQttyTG9j-E0pggUO.lsDm23t9ZdTjsFT.SpzludwTRlun8wQX8VJunzE09tnWHqviupObE-5rF_fAHlcsqMl5ti4Kx53vVf3j"
		},
		{
			"id": "3ebaf697-a0c4-4863-8594-57739ad73a08",
			"key": "data-recipient-id",
			"value": "abcd"
		}
	],
	"protocolProfileBehavior": {}
}