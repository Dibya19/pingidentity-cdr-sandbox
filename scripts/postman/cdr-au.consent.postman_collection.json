{
	"info": {
		"_postman_id": "93d8f46c-76c7-4e9d-b631-adf4dd25b70c",
		"name": "Consent Flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "S001 Create Client",
			"item": [
				{
					"name": "S001.T001 Create Client",
					"item": [
						{
							"name": "S001.T001.001 - DH downloads Software Statement from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "004a1bc3-9737-450e-beff-bae8c9b27135",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate software_statement property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('software_statement');",
											"});",
											"pm.test(\"Validate software_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('software_id');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"softwareStatement\", response.software_statement);",
											"    pm.environment.set(\"softwareId\", response.software_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{pki-basicheader}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_name",
											"value": "Application abc",
											"type": "text"
										},
										{
											"key": "client_desc",
											"value": "This is my application",
											"type": "text"
										},
										{
											"key": "version",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "policy_uri",
											"value": "https://idpv2.pingapac.com/pf/heartbeat.ping",
											"type": "text"
										},
										{
											"key": "terms_uri",
											"value": "https://idpv2.pingapac.com/pf/heartbeat.ping",
											"type": "text"
										},
										{
											"key": "organisation_id",
											"value": "BudgetGuide",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://www.google.com.au,{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "software_id",
											"value": "",
											"type": "text"
										},
										{
											"key": "issuer",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.002 - DR downloads Private Key from CDR Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"id": "48dbfef6-393b-4198-9b80-9ea79bdd33f1"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.003 - DR creates Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc2736ba-0504-421d-b445-3f1701553285",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"request-jwt-createclient\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "softwareStatement",
											"value": "{{softwareStatement}}",
											"type": "text"
										},
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "audience",
											"value": "{{dh-audience}}",
											"type": "text"
										},
										{
											"key": "token-endpoint-auth-method",
											"value": "private_key_jwt",
											"type": "text"
										},
										{
											"key": "grant-types",
											"value": "authorization_code,client_credentials,refresh_token",
											"type": "text"
										},
										{
											"key": "response-types",
											"value": "code id_token",
											"type": "text"
										},
										{
											"key": "application-type",
											"value": "web",
											"type": "text",
											"disabled": true
										},
										{
											"key": "id-token-signed-response-alg",
											"value": "PS256",
											"type": "text"
										},
										{
											"key": "request_object_signing_alg",
											"value": "PS256",
											"type": "text"
										},
										{
											"key": "token-endpoint-auth-signing-alg",
											"value": "PS256",
											"type": "text"
										},
										{
											"key": "redirect-uris",
											"value": "{{default-redirecturi}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestCreate",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestCreate"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.004 - DR run DCR POST request to create a client against DH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a9ad185-5a80-4e2a-a113-f8c4518286ba",
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://httpbin.org/get'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://httpbin.org/get');",
											"    ",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request-jwt-createclient}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49920e47-3544-4dca-83b2-bb16a71e97ea",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "17aff350-8713-40a1-b959-673d996ae39f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "976292dc-3019-49b0-85a2-7eeb60db66ff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa26c9ac-f647-4660-8873-28b980939bc3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S002 Consent Flow - Happy Scenario",
			"item": [
				{
					"name": "S002.T001 Obtain Access Token",
					"item": [
						{
							"name": "S002.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5d50ee6-07f3-4c5c-8e0c-16c8fd4e57d6",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.kty).to.equal('RSA');",
											"});",
											"pm.test(\"Validate algorithm is PS256\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.alg).to.equal('PS256');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = btoa(pm.response.text());",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"softwarestatement",
										"JWKS",
										"{{softwareId}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aab5b3ff-97f1-4f09-9b49-bb8fb67932f0",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"requestGenericJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fb8d8dd-62a2-479b-9a67-9eb6dbc344ca",
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.004 - Provider username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11c92123-c1dc-485f-b685-213cadfac8e7",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16eb4345-38c9-454c-94ca-391abcf18307",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.005 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17facab3-45ca-4b0a-8af7-d52354d2e8c5",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a16c81e7-4e8e-448e-a463-b6de31597f33",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.007 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2eba4c9-2e1d-474a-9309-d133faa41db4",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a67115c6-83c6-4f5e-b6f4-05dae064b203",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88a5393e-5067-47b8-a2de-136e72647dda",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T002 Introspect Tokens",
					"item": [
						{
							"name": "S002.T002.001 Introspect Refresh Token",
							"item": [
								{
									"name": "S002.T002.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40c29c65-3697-412d-93bc-552906ebdd8b",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/introspect.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T002.001.002 - Introspect Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2ecd895-dee7-415f-85d7-0d03a24825de",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate exp is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"});",
													"pm.test(\"Validate active=true\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S003.T002.001 Introspect Access Token - Should fail",
							"item": [
								{
									"name": "S003.T002.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36024947-f9b8-40b0-aa0a-e5e3bf8d1267",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/introspect.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S003.T002.002.002 - Introspect Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e20e0954-e2e1-4177-99d4-4b55766c8ea4",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response active=false\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-access-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T003 Refresh Tokens",
					"item": [
						{
							"name": "S002.T003.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b83d6a2-a220-4434-9e2b-19ac3f3e9582",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"tpp",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T003.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c336b90-e6ce-4861-9d27-7a16a7e41613",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f245354-beda-488b-91fc-7cb2ae4e799e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "41365306-093a-4709-a1c0-5c0bb0fc0cd8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T004 Call Bank API's",
					"item": [
						{
							"name": "S002.T004.001 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bc8aeb2-64cf-40d6-a85b-152fe52dba39",
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6df63d0-94c2-4f30-9967-a1a53fbc39e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.002 - Get account balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e07fddce-25aa-4d4e-ab7f-2faf1cb4a339",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/balance",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"balance"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7cd4c312-8acc-4be9-84b3-12fbd03c7de0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a70e6f1-9d6f-43d1-a604-f1e1fe1d547a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T005 Userinfo",
					"item": [
						{
							"name": "S002.T005.001.002 - Call userinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3bb7dcc-5d22-415c-98e7-60ae4590ee86",
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c20637cf-3727-4936-97f7-28265100af2b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d86c187d-6522-4490-8daa-8d058f4a18be",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "S002.T006 Revoke Tokens",
					"item": [
						{
							"name": "S002.T006.001 Revocation",
							"item": [
								{
									"name": "S002.T006.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac66f2c9-8039-40ce-9cb4-ae916b4b2a13",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T006.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01055b92-6cad-4e79-a775-425d1b525075",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-revocation-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-revocation-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "S002.T006.002 Refresh Tokens - should fail",
							"item": [
								{
									"name": "S002.T006.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8f97f0b-5af6-4513-8951-e11e1d66439a",
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"tpp",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T006.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "679b94a6-0c09-4d55-896c-1dc1dd77dd5f",
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6f222122-2654-48ad-949e-334c1112dac9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c4337616-4d86-4542-8d5a-0fbacfc60d2e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e772ad4c-3afc-497f-8cdd-219bfd979b7d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1cdbf10-91d0-4ceb-a841-5af61017cf07",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b05f195f-0382-42a7-9695-cb94096b0ec7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "82c43eba-bf7b-4621-8e29-fcd0a01d2fb9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "S003 - Push Authorization Request",
			"item": [
				{
					"name": "S003.T001.001 - Download Private Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d552a91a-810e-484f-8c8f-50bc9bb0decf",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate kty is RSA\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.kty).to.equal('RSA');",
									"});",
									"pm.test(\"Validate algorithm is PS256\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.alg).to.equal('PS256');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var responseBlob = btoa(pm.response.text());",
									"    pm.environment.set(\"software-jwks-private\", responseBlob);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{cdr-register-testharness-host}}/softwarestatement/JWKS/{{softwareId}}/private",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"softwarestatement",
								"JWKS",
								"{{softwareId}}",
								"private"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.002 - Create Request JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef3c7840-b88b-4f02-9b06-81327846ac1f",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request-jwt');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-private-jwk",
								"type": "text",
								"value": "{{software-jwks-private}}"
							},
							{
								"key": "x-nonce",
								"type": "text",
								"value": "{{default-nonce}}"
							},
							{
								"key": "x-state",
								"type": "text",
								"value": "{{default-state}}"
							},
							{
								"key": "x-issuer",
								"type": "text",
								"value": "{{dcrClientId}}"
							},
							{
								"key": "x-duration-seconds",
								"type": "text",
								"value": "60"
							},
							{
								"key": "x-dataholder-authorization-endpoint",
								"type": "text",
								"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							},
							{
								"key": "x-response-type",
								"type": "text",
								"value": "code id_token"
							},
							{
								"key": "x-scope",
								"type": "text",
								"value": "openid profile bank:accounts.basic:read bank:transactions:read"
							},
							{
								"key": "x-redirecturi",
								"type": "text",
								"value": "{{default-redirecturi}}"
							},
							{
								"key": "x-maxage",
								"type": "text",
								"value": "-1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/tpp/requestGenericJWT",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"tpp",
								"requestGenericJWT"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.003 - Initiate PAR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03e82d50-3862-4a49-b088-17be37f55536",
								"exec": [
									"pm.test(\"Validate response status=201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request_uri');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-uri\", response[\"request_uri\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "request",
									"value": "{{consent-request-jwt}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://sso.data-holder.local/as/par.oauth2",
							"protocol": "https",
							"host": [
								"sso",
								"data-holder",
								"local"
							],
							"path": [
								"as",
								"par.oauth2"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.003 - Initiate Consent Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f23e1b99-85ff-42a3-a921-f6c0c382dbdc",
								"exec": [
									"",
									"",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}?request_uri={{consent-request-uri}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							],
							"query": [
								{
									"key": "request_uri",
									"value": "{{consent-request-uri}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.004 - Provider username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fa16cd5-134b-4ffa-8129-c61ce0a987e8",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "crn0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.005 - Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "176d833a-8a89-4bba-b9d9-0763efba0a34",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-consent-csrf\", $( \"input[name='cSRFToken']\" ).val());",
									"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).val());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_VALUE",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_STATE",
									"value": "true",
									"type": "text"
								},
								{
									"key": "CSRF_TOKEN",
									"value": "{{consent-request-otp-csrf}}",
									"type": "text"
								},
								{
									"key": "submitform",
									"value": "true",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.005 - Perform consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "440c2068-3538-4a9b-a679-bb31a34413d4",
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var locationHeader = pm.response.headers.get(\"Location\");",
									"    if(!locationHeader)",
									"        locationHeader = pm.response.headers.get(\"Referer\");",
									"",
									"    var locationParams = locationHeader.split(\"#\")[1];",
									"    const eachParamArray = locationParams.split('&');",
									"    let params = {};",
									"    eachParamArray.forEach((param) => {",
									"        const key = param.split('=')[0];",
									"        const value = param.split('=')[1];",
									"        Object.assign(params, {[key]: value});",
									"    });",
									"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
									"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
									"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accounts",
									"value": "{{consent-request-consent-account}}",
									"type": "text"
								},
								{
									"key": "cSRFToken",
									"value": "{{consent-request-consent-csrf}}",
									"type": "text"
								},
								{
									"key": "approved",
									"value": "allow",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:accounts.basic:read",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:transactions:read",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.006 - Creates JWT-Bearer Client Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a639026-43e1-440b-8363-c040c508d97c",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate client assertion is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('client-assertion');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "private-jwk",
									"value": "{{software-jwks-private}}",
									"type": "text"
								},
								{
									"key": "client-id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "token-endpoint",
									"value": "{{dh-idp-host}}/as/token.oauth2",
									"type": "text"
								},
								{
									"key": "kid",
									"value": "{{softwareId}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/tpp/createClientAssertion",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"tpp",
								"createClientAssertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.007 - Perform code exchange",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bb6867-2f66-4732-96ba-4b4836bf9e06",
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate access_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"});",
									"pm.test(\"Validate id_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('id_token');",
									"});",
									"pm.test(\"Validate refresh_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('refresh_token');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
									"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
									"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{consent-request-authcode-callback-code}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{default-redirecturi}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{consent-client-assertion}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cbc73e48-0d59-41ae-b534-aaab7dad7585",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f368db0c-9aa0-48e0-bd8e-31b8c7bc76d8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1ffbbb09-7167-43f2-a309-e8012ae06592",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c4b2b5b4-20c0-491b-9e5c-8df2d7912be9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "60f22961-11a7-48cd-9d18-f3723c212890",
			"key": "cdr-register-testharness-host",
			"value": "http://sso.data-holder.local:8084",
			"type": "string"
		},
		{
			"id": "8ab60703-5b88-4c97-844a-0d6282cda71a",
			"key": "dh-idp-host",
			"value": "https://sso.data-holder.local",
			"type": "string"
		},
		{
			"id": "07b0b5de-2e0c-48e5-90e7-15c5d350197c",
			"key": "dh-idp-register-endpoint",
			"value": "/as/clients.oauth2",
			"type": "string"
		},
		{
			"id": "96552547-ed58-4138-a4d3-fdac02007bfa",
			"key": "dh-idp-token-endpoint",
			"value": "/as/token.oauth2",
			"type": "string"
		},
		{
			"id": "3fbf83d2-d2e6-4ccd-9c99-b15afc18fd81",
			"key": "dh-audience",
			"value": "https://data-holder",
			"type": "string"
		},
		{
			"id": "fa99bd17-58db-4f8a-a973-464d144d3c33",
			"key": "pki-basicheader",
			"value": "Basic cGtpdXNlcjphYmNEMzBmZw==",
			"type": "string"
		},
		{
			"id": "af8e20cc-6f9b-49bf-b82b-36303a587246",
			"key": "default-nonce",
			"value": "ea18887b-8629-43f2-93e1-4346959fb2ec",
			"type": "string"
		},
		{
			"id": "51d2aa4c-e760-4d5b-99c2-c47b5f8d49f6",
			"key": "default-state",
			"value": "887bea18-93e1-8629-43f2-59fb2ec43469",
			"type": "string"
		},
		{
			"id": "9f2e7a31-757a-4d5d-8ac1-5255da4d40f4",
			"key": "dh-idp-authorization-endpoint",
			"value": "/as/authorization.oauth2",
			"type": "string"
		},
		{
			"id": "17c24960-07b0-48a4-b39e-5454032ecca5",
			"key": "default-redirecturi",
			"value": "https://httpbin.org/get",
			"type": "string"
		},
		{
			"id": "c2d763b2-a69b-4980-984f-dd55d1b0c3a5",
			"key": "dh-idp-introspect-endpoint",
			"value": "/as/introspect.oauth2",
			"type": "string"
		},
		{
			"id": "8fc4b8ea-6707-4a73-b4a1-d1bdd77b4c23",
			"key": "dh-api-host",
			"value": "https://api.data-holder.local/cds-au",
			"type": "string"
		},
		{
			"id": "9eac8793-5c2c-4758-9c1a-5175e20e0d0a",
			"key": "dh-idp-revocation-endpoint",
			"value": "/as/revoke_token.oauth2",
			"type": "string"
		},
		{
			"id": "1a1742b3-c21c-4965-9806-4792ac71b12f",
			"key": "dh-idp-userinfo-endpoint",
			"value": "/idp/userinfo.openid",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}